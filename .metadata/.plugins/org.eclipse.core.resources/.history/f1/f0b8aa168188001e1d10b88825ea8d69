/** @file example_module_main.c
 *
 *  This file defines the actual implementation of the functions for 
 *  example_module.
 */

	.include "dsplib/os_asm.h" # include the definition of ROM functions and OS global variables
	.include "example_module_mcv.h"
	.extern _processing

_FILTER_LENGHT .equ 23 
####################### MCV #########################
# The module control vector is a set of Y data variables
# that can be accessed through host communication.
#
example_module_Y_Segment	.ydata_ovly

_hpfCoefs
	.dw  (0xfcf349ef)
	.dw  (0xfee7d5f5)
	.dw  (0x1cc455e)
	.dw  (0x493cf47)
	.dw  (0x5fd287e)
	.dw  (0x4fbb46d)
	.dw  (0x11a94ed)
	.dw  (0xfab6e925)
	.dw  (0xf2fa6c36)
	.dw  (0xeb941083)
	.dw  (0xe64254de)
	.dw  (0x64533dba)
	.dw  (0xe64254de)
	.dw  (0xeb941083)
	.dw  (0xf2fa6c36)
	.dw  (0xfab6e925)
	.dw  (0x11a94ed)
	.dw  (0x4fbb46d)
	.dw  (0x5fd287e)
	.dw  (0x493cf47)
	.dw  (0x1cc455e)
	.dw  (0xfee7d5f5)
	.dw  (0xfcf349ef)
	.ydata_ovly


#_limiterThreshold .dw  (0x7fdf3b64) .ydata_ovly
_lpfCoefs
	.dw  (0x30cb610)
	.dw  (0x1182a0a)
	.dw  (0xfe33baa1)
	.dw  (0xfb6c30b8)
	.dw  (0xfa02d781)
	.dw  (0xfb044b92)
	.dw  (0xfee56b12)
	.dw  (0x54916da)
	.dw  (0xd0593c9)
	.dw  (0x146bef7c)
	.dw  (0x19bdab21)
	.dw  (0x1bacc245)
	.dw  (0x19bdab21)
	.dw  (0x146bef7c)
	.dw  (0xd0593c9)
	.dw  (0x54916da)
	.dw  (0xfee56b12)
	.dw  (0xfb044b92)
	.dw  (0xfa02d781)
	.dw  (0xfb6c30b8)
	.dw  (0xfe33baa1)
	.dw  (0x1182a0a)
	.dw  (0x30cb610)
	.ydata_ovly

	
	.public _inputGain
	.public _limiterThreshold
	.public _modeFlag
	.public _hpfHistoryBuffer
	.public _lpfHistoryBuffer
	.public _lpfCoefs
	.public _hpfCoefs
	.public example_module_MCV
	.public example_module_HOST_MCV
example_module_HOST_MCV MCV_T(.streval(STRUCTURE_INITIALIZATION_STRNG))

#-------------------- end of MCV ---------------------

# Copy of MCV in Xmem
example_module_X_Segment	.xdata_ovly
example_module_MCV	MCV_T		# This is a copy of MCV used by algorithm

example_module_MCV_end

_enableFlag .bss(1)
_modeFlag .bss(1)

_inputGain .bss(1)

_limiterThreshold .dw(0.999) 


X_CX_MINUS_3DB .dw(0.7071)

_lpfHistoryBuffer .bss (0x17)

_hpfHistoryBuffer .bss (0x17)

_inChannels
	.bss (0x1)
	.xdata_ovly

	


	.code_ovly
##################################################################################
## Called from the Brick or Foreground ISR whenever there 
## is one or more bricks of unprocessed PCM in the IO Buffer.
##
## This function can process only one brick of any channel, but all channels are available
##
## This function is inherently an in-place processor -- the input data and output
## data are in the same IO buffer.
##
## There is an array of I/O buffer pointers, located at YMEM addresses ___X_BY_IOBUFFER_PTRS
## These pointers will point at block N for all channels when this function is 
## called.
#################################################################################
	.public X_S_example_module_Brick
X_S_example_module_Brick:

# some example code...
#	a0 = xmem[example_module_MCV.enable]
#	a0&a0 # check to see if we're enabled
#	if (a == 0) jmp X_S_example_module_Block_Done
#		i0 = ymem[___X_BY_IOBUFFER_PTRS] #get a first channel pointer
#		do(BRICK_SIZE), >
#			y0 = xmem[example_module_MCV.gain] # get a gain MCV parameter
#			x0 = ymem[i0]
#			a0 = x0 * y0; 
#%			ymem[i0] = a0; i0 += 1
		
	
#   <your code here>

	#no need for sample buffer was just a place holder for IObuffs
	
	b2=b2^b2 //puts  0 into b2
	a2=xmem[example_module_MCV.enable]
		
	b2-a2
	if(b==0) jmp X_S_example_module_Brick_Done
		i0= ymem[___X_BY_IOBUFFER_PTRS] #get L ch pointer
		i1= ymem[___X_BY_IOBUFFER_PTRS] #get L ch Pointer
		call _processing

	
# end of brick function
X_S_example_module_Brick_Done:
  ret

###############################################################################
## Called from the Brick or Foreground ISR
## This function gets called on frame boundaries (integer multiples of sample-blocks)
##   Example 1:  AAC Frame-size is 1024 samples
##   Example 2:  Our PCM frame-size was chosen to be 256 samples
##
## Use this as another place to act on MCV changes.  This is called more often than
## the Timer functions, but is only called when the DAO clocks are active (only an issue 
## with Decoder chips)
###############################################################################
	.public X_S_example_module_Frame
X_S_example_module_Frame:
#   <your code here>
X_S_example_module_Frame_done:
  ret           


###############################################################################
## Called from the Brick or Foreground ISR
## Called only when the Timer flag is set (gets set by the Timer ISR)
## Use this to act on MCV changes when the block and frame functions are not being called,
## e.g. when there is no input audio signal.
###############################################################################
	.public X_S_example_module_Timer
X_S_example_module_Timer:
#   <your code here>
X_S_example_module_Timer_done:
  ret

###############################################################################
## Called from an infinite-loop in the main body of the OS code
## Can be interrupted, so exercise caution when using global vars that are 
## used in the foreground ISR
###############################################################################
	.public X_S_example_module_Background
X_S_example_module_Background:

# SAMPLE CODE:
#	MCV used as a shadow copy on host MCV
#   This code will copy module_test_HOST_MCV to module_test_MCV
	i0 = (example_module_HOST_MCV)
	i1 = (example_module_MCV)
	nm0 = (1)
	nm1 = (1)
	do(sizeof(MCV_T)), >loop
		a0 = ymem[i0]; i0 += n
%loop:		xmem[i1] = a0; i1 += n

#   <your code here>
X_S_example_module_Background_Done:
  ret

##################################################################################
## Called from the Brick or Foreground ISR
## Used for requesting memory from the heap
## Called immediately after the frame functions are called and immediately prior 
## to the PostMalloc functions.
##
## This function is only called if one or more modules set the X_VX_NextFrm_Reinit_Req 
## flag (in the Frame function).
## When this happens, all modules' PreMalloc functions get called so that each module 
## has the chance to ask for heap memory.
## 
## If this function gets called, the OS has already freed all of the heap, and all heap-using modules
## MUST request heap again.
##
## Examples of Heap Requests:
## 
#####  Example 1:  Request 512 words from XMEM
#####  i0 = (VX_Buffer_0_Ptr) ### Os place the address of the malloced RAM in this var in XRAM
#####  uhalfword(x0) = (0x200)
#####  call cl_mallocX

#####  Example 2:  Request 768 words from YMEM
#####  i0 = (VX_Buffer_1_Ptr) ### Os place the address of the malloced RAM in this var in XRAM
#####  uhalfword(x0) = (0x300)
#####  call cl_mallocY

#####  Example 3:  Request 512 of words from XMEM aligned to a modulo boundary
#####  i0 = (VX_Buffer_2_Ptr) ### Os place the address of the malloced RAM in this var in XRAM
#####  uhalfword(x0) = (0x200)
#####  call cl_mallocModX

#####  Example 4:  Request 64 words from LMEM aligned to a modulo boundary
#####  i0 = (VX_Buffer_3_Ptr) ### Os place the address of the malloced RAM in this var in XRAM
#####  uhalfword(x0) = (64)
#####  call cl_mallocModL

### There are 6 types of malloc requests: X, Y, L modulo and non-modulo
### Mallocation is all or nothing.  If there is not enough available heap to accomodate
### the entire set of requests, the systems halts.

### If the Malloc succeeds, the OS calls the Post Malloc functions.
#################################################################################
	.public X_S_example_module_PreMalloc
X_S_example_module_PreMalloc:
#   <your code here>
X_S_example_module_PreMalloc_Done:
  ret

##################################################################################
## Called from the Brick or Foreground ISR
## Called if the mallocations requested by the modules' Pre-Mallocs succeeds
## This gives the module designer a chance to act upon the newly acquired buffers
## if so desired.  For example, a malloced example_module-filter history-buffer should be 
## cleared here.
##
## This function is also a good place to set a malloc-success flag for the benefit
## of the Block function.  That is, the Block function should never try to operate on
## a buffer that has not yet been malloced
#################################################################################
	.public X_S_example_module_PostMalloc
X_S_example_module_PostMalloc:
#   <your code here>
X_S_example_module_PostMalloc_Done:
  ret

###############################################################################
## Unconditional initializations (i.e., vars whose values don't depend on MCV)
## This function gets called before the KickStart message is received and acted-on
## Called only when the OS re-boots
###############################################################################
	.public X_S_example_module_PreKickstart
X_S_example_module_PreKickstart:
#   <your code here>
X_S_example_module_PreKickstart_done:
  
  ret


###############################################################################
## Unconditional initializations (i.e., vars whose values don't depend on MCV)
##    OR
## Conditional initializations (i.e., vars whose values depend on MCV)
##
## This function gets called immediately after the KickStart message is received
## by the OS and acted-on (i.e., prior to any other Framework Entry-point).
##
## This function also gets called upon App-Restart (which happens after recovering 
## from an audio under-flow).
##
## This function gets called before any block-processing functions are called.
##
## An example of the kind of initialization that must happen here would be any 
## filter state that must be cleared prior to starting audio again. 
###############################################################################
	.public X_S_example_module_PostKickstart
X_S_example_module_PostKickstart:
#   <your code here>
	a0=xmem[X_CX_MINUS_3DB] //default vaule
	b0=b0^b0
	ymem[example_module_HOST_MCV.inputGain]=a0
	xmem[example_module_MCV.inputGain]=a0
	b0=(0x0)
	ymem[example_module_HOST_MCV.mode1enable]=b0
	xmem[example_module_MCV.mode1enable]=b0
	b0=(0x1)
	ymem[example_module_HOST_MCV.enable]=b0
	xmem[example_module_MCV.enable]=b0
	
	
	
	xmem[_inputGain]=a0;//initialisation of _input gain //setting a0 to 0
	i0=(_lpfHistoryBuffer)
	i1=(_hpfHistoryBuffer)
	a0=a0^a0
	do(_FILTER_LENGHT),>loop //history buffer init loop
	xmem[i0]=a0;i0+=1 
%loop:xmem[i1]=a0;i1+=1

X_S_example_module_PostKickstart_done:
                     
  ret
