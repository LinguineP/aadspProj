#include <dsplib\wavefile.h>
#include <stdfix.h>
#include <string.h>
#include "common.h"
#include "FIRcoefs.h"
#include <ctype.h>

#define BLOCK_SIZE 16
#define MAX_NUM_CHANNEL 8


// default Input gain values. 


// User commands
static DSPint enableFlag;
static DSPint modeFlag;




// IO Buffers
static DSPfract sampleBuffer[MAX_NUM_CHANNEL][BLOCK_SIZE];

// Processing related variables
static DSPfract inputGain;
static DSPfract postGain;
static DSPfract variablesGain[INPUT_NUM_CHANNELS];
static DSPfract limiterThreshold = FRACT_NUM(0.999);


void initGainProcessing(DSPfract preGain)
{
	// initialises gains
	DSPint i;
	DSPfract* lpfhistoryBuffPtr;
	DSPfract* hpfhistoryBuffPtr;
	inputGain = preGain;
	hpfhistoryBuffPtr = hpfHistoryBuffer;
	lpfhistoryBuffPtr = lpfHistoryBuffer;
	for (i = 0; i < FILTER_LENGHT; i++)
	{
		*hpfhistoryBuffPtr = (DSPfract)0;
		*lpfhistoryBuffPtr = (DSPfract)0;
		hpfhistoryBuffPtr++;
		lpfhistoryBuffPtr++;
	}

}

DSPfract fir_basic(DSPfract input, DSPfract* coeffs, DSPfract* history)
{
	DSPint i;
	DSPfract ret_val = 0;
	DSPaccum multiplyResult;

	DSPfract* coeffsPtr = coeffs;
	//pointers to second to last and last array members
	DSPfract* historyBufferPtr = history+(FILTER_LENGHT-2);
	DSPfract* nexthistoryBufferPtr = history + (FILTER_LENGHT-1);

	//shifting all values of the history buffer towards the end by one to make room for a new value	
	for (i = FILTER_LENGHT - 2; i >= 0; i--)
	{
		*nexthistoryBufferPtr = *historyBufferPtr; //shift by one
		historyBufferPtr--; // moving pointers towards the beggining
		nexthistoryBufferPtr--;
	}
	
	historyBufferPtr++; //ptr was pointing one place before the beggining setting it to point to beggining of the array
	/* store input at the beginning of the delay line */
	*historyBufferPtr = input; 

	//initilising coeff pointer


	/* calc FIR via convolution*/
	for (i = 0; i < FILTER_LENGHT; i++)
	{
		multiplyResult = ((*coeffsPtr) * (*historyBufferPtr));
		//multiplyResult = multiplyResult << 1;
		ret_val += multiplyResult; //descrete convolution 
		coeffsPtr++;
		historyBufferPtr++;
	}
	return ret_val;
}

DSPfract saturation(DSPfract in)
{
	//a simple limiter in case a value goes out of range
	if (in > limiterThreshold)
	{
		return  limiterThreshold;
	}
	else if (in < -limiterThreshold)
	{
		return  -limiterThreshold;
	}

	return in;
}

void processing(DSPfract pIn[][BLOCK_SIZE], DSPfract pOut[][BLOCK_SIZE])
{
	// input pointers
	DSPfract* L_CH_In_Ptr = *pIn;
	DSPfract* R_CH_In_Ptr = *(pIn + R_CH);

	// output pointers
	DSPfract* L_CH_Out_Ptr = *pOut;
	DSPfract* R_CH_Out_Ptr = *(pOut + R_CH);
	DSPfract* C_CH_Out_Ptr = *(pOut + C_CH);
	DSPfract* RS_CH_Out_Ptr = *(pOut + RS_CH);
	DSPfract* LS_CH_Out_Ptr = *(pOut + LS_CH);
	DSPaccum processed_L_CH=0.0;
	DSPaccum processed_R_CH=0.0;
	DSPaccum centerSum=0.0;
	DSPint j;

	for ( j = 0; j < BLOCK_SIZE; j++)
	{
		//first stage, apply inputGain on L & R channels 
		//*L_CH_Out_Ptr = saturation((*L_CH_Out_Ptr) * (*gains));
		processed_L_CH = (DSPfract)(*L_CH_In_Ptr) * (DSPfract)(inputGain);
		//processed_L_CH = processed_L_CH << 1;
		*L_CH_Out_Ptr = (DSPfract)saturation(processed_L_CH);
		
		//pIn[R_CH][j] = saturation(pIn[R_CH][j] * variablesGain[R_CH]);
		processed_R_CH = (DSPfract)(*R_CH_In_Ptr) * (DSPfract)(inputGain);
		//processed_R_CH = processed_R_CH << 1;
		*R_CH_Out_Ptr = (DSPfract)saturation(processed_R_CH);
		
		//passing through processed L & R channels To Ls and Rs channels
		*LS_CH_Out_Ptr = (DSPfract)processed_L_CH;
		*RS_CH_Out_Ptr = (DSPfract)processed_R_CH;
	
		if (modeFlag) 
		{	//doing fir filtering on L&R channels
			*L_CH_Out_Ptr = fir_basic(*L_CH_Out_Ptr,hpfCoefs, hpfHistoryBuffer);
			*R_CH_Out_Ptr = fir_basic(*R_CH_Out_Ptr,lpfCoefs, lpfHistoryBuffer);
		
		}
		/*else
		{	// bypassing filtering
			*L_CH_Out_Ptr = *L_CH_Out_Ptr;
			*R_CH_Out_Ptr = *R_CH_Out_Ptr;

		}*/
		
		processed_L_CH = (DSPfract)*L_CH_Out_Ptr;
		processed_R_CH = (DSPfract)*R_CH_Out_Ptr;
		


		// generate C_CH as a sum of L & R output channels
		centerSum = (DSPfract)processed_L_CH + (DSPfract)processed_R_CH;
		*C_CH_Out_Ptr = (DSPfract)saturation(centerSum);

		//*LS_CH_Out_Ptr=0.0;
		//*RS_CH_Out_Ptr=0.0;
		//*C_CH_Out_Ptr=0.0;
		

		L_CH_In_Ptr++;
		R_CH_In_Ptr++;
		//move through a buffer
		L_CH_Out_Ptr++;
		R_CH_Out_Ptr++;
		LS_CH_Out_Ptr++;
		RS_CH_Out_Ptr++;
		C_CH_Out_Ptr++;
		
	}
}

	
//only for testing purpuses
DSPfract my_atof(const char *str) {
	DSPfract fraction = FRACT_NUM(0.0);
	DSPfract decimalPlace = ACCUM_NUM(10.0);

    // Skip leading whitespace
    while (*str == '0') {
        str++;
    }

    // Process digits after the decimal point
    if (*str == '.') {
        str++; // Move past the decimal point

        while (*str != '\0') {
            fraction += (*str++ - '0') / decimalPlace;
            decimalPlace *= ACCUM_NUM(10.0);
        }
    }

    return fraction;
}



	
/////////////////////////////////////////////////////////////////////////////////
/// MODEL0
/////////////////////////////////////////////////////////////////////////////////
// @Author	<Pavle Vasiljevic RA207/2020>
//
// Function:
// main
//
// @param - argv[1] - Input file name
//        - argv[2] - Output file name
//		  - argv[3] - enable on off (0 or 1) default on
//		  - argv[4] - g1 gain for the left channel default -3db (value [0,2])
//		  - argv[5] - g2 gain () default -3db (value [0,2])
//		  - argv[6] - mode (0 or 1) default 0
// @return - nothing
// Comment: main routine of a program
//
// E-mail:	<email>
//
/////////////////////////////////////////////////////////////////////////////////
static DSPfract sampleBuffer[MAX_NUM_CHANNEL][BLOCK_SIZE];

int main(int argc, char *argv[])
 {
    WAVREAD_HANDLE *wav_in;
    WAVWRITE_HANDLE *wav_out;

	char WavInputName[256];
	char WavOutputName[256];

	int i;
	int j;

    DSPint inChannels;
    DSPint outChannels;
    DSPint bitsPerSample;
    DSPint sampleRate;
    DSPint iNumSamples;

    DSPfract preGain = MINUS_3DB; // -3dB
    enableFlag = DEFAULTENABLE;
    modeFlag = DEFAULTMODE;

    if (argc == FULL_ARGS_PASSED) {
    	preGain = my_atof(argv[4]); //sets input Gain
    	enableFlag = my_atoi(argv[3]); //sets the enable flag
    	modeFlag = my_atoi(argv[5]);	//sets the mode
    }

	// Init channel buffers
	for(i=0; i<MAX_NUM_CHANNEL; i++)
		for(j=0; j<BLOCK_SIZE; j++)
			sampleBuffer[i][j] = FRACT_NUM(0.0);

	// Open input wav file
	//-------------------------------------------------
	strcpy(WavInputName,argv[0]);
	wav_in = cl_wavread_open(WavInputName);
	 if(wav_in == NULL)
    {
        printf("Error: Could not open wavefile.\n");
        return -1;
    }
	//-------------------------------------------------

	// Read input wav header
	//-------------------------------------------------
	inChannels = cl_wavread_getnchannels(wav_in);
    bitsPerSample = cl_wavread_bits_per_sample(wav_in);
    sampleRate = cl_wavread_frame_rate(wav_in);
    iNumSamples =  cl_wavread_number_of_frames(wav_in);
	//-------------------------------------------------

	// Open output wav file
	//-------------------------------------------------
	strcpy(WavOutputName,argv[1]);
	outChannels = inChannels;
	wav_out = cl_wavwrite_open(WavOutputName, bitsPerSample, outChannels, sampleRate);
	if(!wav_out)
    {
        printf("Error: Could not open wavefile.\n");
        return -1;
    }
	//-------------------------------------------------

	initGainProcessing(preGain);
	// Processing loop
	//-------------------------------------------------
    {

		int k;
		int sample;

		// exact file length should be handled correctly...
		for(i=0; i<iNumSamples/BLOCK_SIZE; i++)
		{
			for(j=0; j<BLOCK_SIZE; j++)
			{
				for(k=0; k<inChannels; k++)
				{
					sample = cl_wavread_recvsample(wav_in);
        			sampleBuffer[k][j] = rbits(sample);
				}
			}

			// pozvati processing funkciju ovde
			if(enableFlag)
			{
				processing(sampleBuffer, sampleBuffer);
			}

			for(j=0; j<BLOCK_SIZE; j++)
			{
				for(k=0; k<outChannels; k++)
				{
					sample = bitsr(sampleBuffer[k][j]);
					cl_wavwrite_sendsample(wav_out, sample);
				}
			}
		}
	}

	// Close files
	//-------------------------------------------------
    cl_wavread_close(wav_in);
    cl_wavwrite_close(wav_out);
	//-------------------------------------------------

    return 0;
 }
