1     	 0000				_PROC_ASM
2     						
3     							.if defined (_PROC_ASM)
4     						.include "example_module_mcv.h"
4      >> open include file: D:/fax/aadspproj/aadspProj/modelFinalni/example_module/gen/inc/example_module_mcv.h
1+    						/*
2+    						 * This file is automatically generated by CLIDE
3+    						 *
4+    						 * MCV (Module Control Vector)
5+    						 */
6+    						.include "dsplib/meter_asm.h" 
6+     >> open include file: C:/CirrusDSP/include/dsplib/meter_asm.h
1+    							.if !defined(_meter_h_)
2+    	 0000				_meter_h_
3+    						
4+    						METER_T .struct
5+    						RMS .dw 0			#fract(1.31)
6+    						RMS_HOLD .dw 0		#fract(1.31)
7+    						PEAK .dw 0			#fract(1.31)
8+    						PEAK_HOLD .dw 0		#fract(1.31)
9+    							.endstruct
10+   						
11+   						(null)11+    >> end of include file: C:/CirrusDSP/include/dsplib/meter_asm.h
11+    >> continuing with file: D:/fax/aadspproj/aadspProj/modelFinalni/example_module/gen/inc/example_module_mcv.h
7+    						.include "dsplib/response_asm.h"
7+     >> open include file: C:/CirrusDSP/include/dsplib/response_asm.h
1+    							.if !defined(_response_h_)
2+    	 0000				_response_h_
3+    						
4+    						BIQUAD_T .struct
5+    						COEF_A1 .dw 0			#fract(2.30)
6+    						COEF_A2 .dw 0			#fract(2.30)
7+    						COEF_B0 .dw 1			#fract(3.29)
8+    						COEF_B1 .dw 0			#fract(3.29)
9+    						COEF_B2 .dw 0			#fract(3.29)
10+   							.endstruct
11+   						
12+   						RESPONSE_T .struct
13+   						PRE .dw 0			#fract(7.25)
14+   						POST .dw 0			#fract(7.25)
15+   							.rept %i = 0,2
16+   						BIQUAD_%i BIQUAD_T		#struct
17+    >> start of macro: .rept
1+    						BIQUAD_0 BIQUAD_T		#struct
2+    						BIQUAD_1 BIQUAD_T		#struct
3+    						BIQUAD_2 BIQUAD_T		#struct
4+    						
17+   							.endm
18+   							.endstruct
19+   							
20+   							.endif21+   						(null)21+    >> end of include file: C:/CirrusDSP/include/dsplib/response_asm.h
21+    >> continuing with file: D:/fax/aadspproj/aadspProj/modelFinalni/example_module/gen/inc/example_module_mcv.h
8+    						
9+    	 0001				isDefined	 .equ 	 1
10+   						
11+   						MCV_T	.struct
12+   						mode1 .dw 0	 #bool
13+   						enable .dw 0	 # bool	non-zero to enable this function
14+   						inputGain .dw 0	 #fract(1.31)
15+   							.endstruct
16+   						
17+   						
18+   	 0000				STRUCTURE_INITIALIZATION_STRNG .equ "0x0, 0x1, 0x00000000"
19+    >> end of include file: D:/fax/aadspproj/aadspProj/modelFinalni/example_module/gen/inc/example_module_mcv.h
19+    >> continuing with file: D:/fax/aadspproj/aadspProj/modelFinalni/example_module/src/proc.a
5     						
6     						
7     	 0000				_L_CH .equ 0
8     	 0001				_R_CH .equ 1
9     	 0002				_LS_CH .equ 2
10    	 0003				_RS_CH .equ 3
11    	 0004				_C_CH .equ 4
12    	 0010				_BLOCK_SIZE .equ 16
13    	 0017				_FILTER_LENGHT .equ 23
14    						
15    	 0000					.public _processing
16    	 0000					.extern _inputGain
17    	 0000					.extern _limiterThreshold
18    	 0000					.extern _saturation
19    	 0000					.extern _modeFlag
20    	 0000					.extern _hpfCoefs
21    	 0000					.extern _lpfCoefs
22    	 0000					.extern _lpfHistoryBuffer
23    	 0000					.extern _hpfHistoryBuffer
24    	 0000					.extern example_module_MCV(MCV_T)
25    							
26    						 	.code_ovly 
26     >> start of macro: .code_ovly
1+    									seg_single , "CODE_OVLY", CODE
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_CODE_ )
2+    						    segment
3+    						  .else
4+    						    segment "CODE_OVLY"
5+    							.if "" != ""
6+    						___SegStart_CODE_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .code_ovly
27    						 	
28    						 	# prema CCC2 pozivnoj konvenciji: 
29    						 	# i0 - parametar pokazivac, pIn
30    						 	# i1 - parametar pokazivac, pOut
31    	 0000				_processing:
32    						
33    							# Save index registers on stack
34    	 0000	 B2540017		xmem[i7] = i2; i7 += 1;
35    	 0001	 B3540017		xmem[i7] = i3; i7 += 1;
36    	 0002	 B8540017		xmem[i7] = i4; i7 += 1;
37    	 0003	 B9540017		xmem[i7] = i5; i7 += 1;
38    	 0004	 BA540017		xmem[i7] = i6; i7 += 1;
39    							#save accums to the stack
40    	 0005	 8A540017		xmem[i7] = a2; i7 += 1;
41    	 0006	 8E540017		xmem[i7] = b2; i7 += 1;
42    	 0007	 8B540017		xmem[i7] = a3; i7 += 1;
43    	 0008	 8F540017		xmem[i7] = b3; i7 += 1;
44    						
45    						//    input pointers
46    						#	__memY DSPfract* L_CH_In_Ptr = *pIn; //already in i0
47    						# 	__memY DSPfract* R_CH_In_Ptr = *(pIn + R_CH);
48    	 0009	 82050010		i2 = i0 + (_R_CH * _BLOCK_SIZE)   
49    						// output pointers
50    						#	__memY DSPfract* L_CH_Out_Ptr = *pOut; already in i1
51    						#	__memY DSPfract* R_CH_Out_Ptr = *(pOut + R_CH);
52    	 000A	 83150010		i3 = i1 + (_R_CH * _BLOCK_SIZE)	
53    						#	__memY DSPfract* RS_CH_Out_Ptr = *(pOut + RS_CH);
54    	 000B	 84150020		i4 = i1 + (_LS_CH * _BLOCK_SIZE)
55    						#	__memY DSPfract* LS_CH_Out_Ptr = *(pOut + LS_CH);
56    	 000C	 85150030		i5 = i1 + (_RS_CH * _BLOCK_SIZE)
57    						# 	__memY DSPfract* C_CH_Out_Ptr = *(pOut + C_CH);
58    	 000D	 86150040		i6 = i1 + (_C_CH * _BLOCK_SIZE)
59    						
60    						
61    						#index register mapping:
62    						# i0=L_CH_In_Ptr
63    						# i2=R_CH_In_Ptr
64    						# i1=L_CH_Out_Ptr
65    						# i3=R_CH_Out_Ptr
66    						# i4=LS_CH_Out_Ptr 
67    						# i5=RS_CH_Out_Ptr
68    						# i6=C_CH_Out_Ptr
69    						#i7	STACK BOUND
70    						#
71    						
72    						#	DSPaccum processed_L_CH=0.0;a2 // these will be replaced by registers a2 & b2
73    						#	DSPaccum processed_R_CH=0.0;b2
74    						#	DSPaccum centerSum=0.0;
75    						#  DSPint j;  //will be replaced with a hw loop  along with the for
76    						
77    						#	for ( j = 0; j < BLOCK_SIZE; j++)
78    							#{
79    						##################################################################
80    						//processing loop
81    						#################################################################
82    								
83    	 000E	 8100004B		do(_BLOCK_SIZE),>loop
84    								#######################################################
85    								//first stage, apply inputGain on L & R channels 
86    								######################################################
87    								
88    								//L_CH
89    								# processed_L_CH = (DSPfract)(*L_CH_In_Ptr) * (DSPfract)(inputGain);
90    								# *L_CH_Out_Ptr = (DSPfract)saturation(processed_L_CH);
91    								#L_CH_In_Ptr++;
92    	 000F	 84940010			y0 = ymem[i0]; i0 += 1  // loads the sample value and moves input  pointer through the block
93    	 0010	 80040000			x0 = xmem[example_module_MCV.inputGain]   //loads inputGain
94    	 0011	 00002400			a0 = x0 * y0 //applies gain output of L_Ch of this phase is in a0
95    	 0012	 8C040000			b0 = xmem[_limiterThreshold]
96    							# if (in < limiterThreshold)
97    	 0013	 00004F20			a0 - b0
98    	 0014	 84880017			if (a < 0) jmp>less
99    	 0015	 4C487FFF				a0 = b0
100   	 0016	 8008001B				jmp>endSaturation
101   	 0017				%less: 
102   							# if (in >= -limiterThreshold)
103   	 0017	 00004C84			b0 = -b0
104   	 0018	 00004F20			a0 - b0
105   	 0019	 84C8001B			if (a >= 0) jmp>endSaturation
106   	 001A	 4C487FFF				a0 = b0	
107   	 001B				%endSaturation:
108   								//L_CH
109   								# *LS_CH_Out_Ptr = (DSPfract)processed_L_CH;
110   	 001B	 88D40014			ymem[i4]=a0; i4+=1//writes corrected volumes of L_CH To LS_CH
111   								
112   								
113   								//R_CH
114   								#pIn[R_CH][j] = saturation(pIn[R_CH][j] * variablesGain[R_CH]);
115   								# processed_R_CH = (DSPfract)(*R_CH_In_Ptr) * (DSPfract)(inputGain);
116   								# *R_CH_Out_Ptr = (DSPfract)saturation(processed_R_CH);
117   								#R_CH_In_Ptr++;
118   	 001C	 85940012			y1 = ymem[i2]; i2 += 1  // loads the sample value and moves input pointer through the block
119   								//inputGain same for both
120   	 001D	 00002421			a1 = y1 * x0 //applies gain output of R_Ch of this phase is in a1
121   	 001E	 8D040000			b1 = xmem[_limiterThreshold]
122   								# if (in < limiterThreshold)
123   	 001F	 00004F29			a1 - b1
124   	 0020	 84880023			if (a < 0) jmp>less
125   	 0021	 4D497FFF				a1 = b1
126   	 0022	 80080027				jmp>endSaturation
127   	 0023				%less: 
128   							# if (in >= -limiterThreshold)
129   	 0023	 00004C8D			b1 = -b1
130   	 0024	 00004F29			a1 - b1
131   	 0025	 84C80027			if (a >= 0) jmp>endSaturation
132   	 0026	 4D497FFF				a1 = b1	
133   	 0027				%endSaturation:
134   								
135   								
136   								
137   								##################################################################
138   								//passing through processed L & R channels To Ls and Rs channels
139   								##################################################################
140   								
141   							
142   								//R_CH
143   								# *RS_CH_Out_Ptr = (DSPfract)processed_R_CH;
144   	 0027	 89D40015			ymem[i5]=a1;i5+=1//writes corrected volumes of R_CH To RS_CH	
145   								
146   							
147   							
148   							
149   								########################################################
150   								//mode 0 1 dependent processing
151   								########################################################
152   								
153   								#processed_L_CH = (DSPfract)*L_CH_Out_Ptr;
154   	 0028	 484B7FFF			a3=a0 //saving a0 for further use
155   								#processed_R_CH = (DSPfract)*R_CH_Out_Ptr; 
156   	 0029	 494F7FFF			b3=a1 //saving a0 for further use
157   								
158   								
159   								
160   								// fir filtering part
161   								# if (modeFlag)  //mode check logic
162   	 002A	 00004D56			b2=b2^b2 //puts  0 into b2
163   	 002B	 8A040000			a2=xmem[example_module_MCV.mode1]
164   								
165   	 002C	 00004F36			b2-a2
166   	 002D	 8608003D			if(b==0) jmp>mode0
167   								
168   								//mode 1 processing
169   								#	{	//doing fir filtering on L&R channels
170   						///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		
171   								//L_CH
172   	 002E	 B0540017			xmem[i7] = i0; i7 += 1; //saving i0 and i1 registers with pointers to the L_Ch_in and L_Ch_out so they can be used for a function call
173   	 002F	 B1540017			xmem[i7] = i1; i7 += 1; 
174   								//prepping arguments for L_CH
175   								//correct value is already in a0
176   	 0030	 B04A0000			i0=(_hpfCoefs)
177   	 0031	 B14A0000			i1=(_hpfHistoryBuffer)
178   								// we are calling this function fir_basic( DSPfract input(in a0), __memY DSPfract* coeffs(in i0),  __memX DSPfract* history(in i1))
179   								//this call 
180   								#  	*L_CH_Out_Ptr = fir_basic(*L_CH_Out_Ptr,hpfCoefs, hpfHistoryBuffer);
181   	 0032	 80880057			call _fir_basic
182   								//i7 -= 1;	
183   	 0033	 B1140007			i1=xmem[i7]; 
184   	 0034	 B1540017			xmem[i7] = i1; i7 += 1; 
185   								//ymem[i1]=a0;//saving the result into output buffer for L_CH
186   								
187   								#processed_L_CH = (DSPfract)*L_CH_Out_Ptr;
188   	 0035	 484B7FFF			a3=a0;//saving result of this phase for next phase   a2
189   								//prepping arguments for R_CH
190   								
191   						//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		
192   								
193   								
194   								//R_CH
195   	 0036	 49487FFF			a0=a1 //putting the R_Ch value into a0
196   	 0037	 B04A0000			i0=(_lpfCoefs)
197   	 0038	 B14A0000			i1=(_lpfHistoryBuffer)
198   								//this call
199   								#  	*R_CH_Out_Ptr = fir_basic(*R_CH_Out_Ptr,lpfCoefs, lpfHistoryBuffer);
200   	 0039	 80880057			call _fir_basic
201   								
202   								#processed_R_CH = (DSPfract)*R_CH_Out_Ptr; 
203   	 003A	 484F7FFF			b3=a0 ////saving result of this phase for next phase
204   								
205   								
206   								//restoring values from the stack
207   								//i7 -= 1;
208   								
209   	 003B	 B1140027			i1=xmem[i7]; i7 -= 1;
210   	 003C	 B0140007			i0=xmem[i7]; 
211   	 003D				%mode0:
212   								
213   								
214   	 003D	 8BD40011			ymem[i1]=a3;i1+=1
215   								
216   	 003E	 8FD40013			ymem[i3]=b3;i3+=1
217   								
218   								
219   								// generate C_CH as a sum of L & R output channels
220   								#centerSum = (DSPfract)processed_L_CH + (DSPfract)processed_R_CH;
221   								#*C_CH_Out_Ptr = (DSPfract)saturation(centerSum);
222   								//a0 no longer in use so can be used for centerSum variable
223   	 003F	 000045B8			a0=a3+b3
224   	 0040	 00007FFF			nop
225   	 0041	 00007FFF			nop
226   								
227   	 0042	 8C040000			b0 = xmem[_limiterThreshold]
228   							# if (in < limiterThreshold)
229   	 0043	 00004F20			a0 - b0
230   	 0044	 84880047			if (a < 0) jmp>less
231   	 0045	 4C487FFF				a0 = b0
232   	 0046	 8008004B				jmp>endSaturation
233   	 0047				%less: 
234   							# if (in >= -limiterThreshold)
235   	 0047	 00004C84			b0 = -b0
236   	 0048	 00004F20			a0 - b0
237   	 0049	 84C8004B			if (a >= 0) jmp>endSaturation
238   	 004A	 4C487FFF				a0 = b0	
239   	 004B				%endSaturation:
240   								//move through a buffer
241   								#L_CH_Out_Ptr++;
242   								#R_CH_Out_Ptr++;
243   								#LS_CH_Out_Ptr++;
244   								#RS_CH_Out_Ptr++;
245   								#C_CH_Out_Ptr++;
246   						
247   						
248   	 004B	 88D40016	%loop: ymem[i6]=a0;i6+=1
249   						
250   	 004C				_end_processing:
251   						//stack restoring
252   	 004C	 02177FFF		i7 -= 1;
253   							
254   							#return accums to prev state
255   	 004D	 8F140027		b3=xmem[i7] ; i7 -= 1;
256   	 004E	 8B140027		a3=xmem[i7] ; i7 -= 1;
257   	 004F	 8E140027		b2=xmem[i7] ; i7 -= 1;
258   	 0050	 8A140027		a2=xmem[i7] ; i7 -= 1;
259   							# return index regs to prev stat
260   	 0051	 BA140027		i6=xmem[i7]; i7 -= 1;
261   	 0052	 B9140027		i5=xmem[i7]; i7 -= 1;
262   	 0053	 B8140027		i4=xmem[i7]; i7 -= 1;
263   	 0054	 B3140027		i3=xmem[i7] ; i7 -= 1;
264   	 0055	 B2140007		i2=xmem[i7] ; 
265   							
266   	 0056	 81880000		ret
267   						############################################################
268   						############################################################
269   						//fir filter 	
270   						############################################################	
271   	 0057				_fir_basic:
272   							//DSPint i;
273   							//DSPfract ret_val = 0;
274   							//input is in a0
275   							#save registers to stack
276   	 0057	 B3540017		xmem[i7] = i3; i7 += 1;
277   							#save accums to the stack
278   	 0058	 8A540007		xmem[i7] = a2;
279   						
280   							
281   							
282   							//pointers to second to last and last array members
283   							#DSPfract* nexthistoryBufferPtr = history + (FILTER_LENGHT-1);
284   	 0059	 83150016		i3 = i1 + ((_FILTER_LENGHT)-1);
285   							#DSPfract* historyBufferPtr = history+(FILTER_LENGHT-2);
286   	 005A	 81150015		i1 = i1+((_FILTER_LENGHT)-2);
287   							
288   						
289   							//shifting all values of the history buffer towards the end by one to make room for a new value	
290   							#for (i = FILTER_LENGHT - 2; i >= 0; i--)
291   							#{
292   	 005B	 8170005D		do(_FILTER_LENGHT),>loop
293   							#*nexthistoryBufferPtr = *historyBufferPtr; //shift by one
294   	 005C	 8A140021		a2=xmem[i1];i1-=1
295   							 // moving pointers towards the beggining
296   							#nexthistoryBufferPtr--;
297   	 005D	 8A540023	%loop:xmem[i3]=a2;i3-=1
298   						
299   							#historyBufferPtr++; //ptr in i1 was pointing 2 places before the beggining setting it to point to beggining of the array
300   	 005E	 02297FFF		i1+=2; 
301   							/* store input at the beginning of the delay line */
302   							#*historyBufferPtr = input; 
303   	 005F	 88540001		xmem[i1]=a0
304   							
305   							//initilising coeff pointer
306   							#DSPfract* coeffsPtr = coeffs; 
307   							//already in a2
308   							
309   							/* calc FIR via convolution*/
310   							#for (i = 0; i < FILTER_LENGHT; i++)
311   							#{
312   							#	multiplyResult = ((*coeffsPtr) * (*historyBufferPtr));
313   							#	ret_val += multiplyResult; //descrete convolution 
314   							#	coeffsPtr++;
315   							#	historyBufferPtr++;
316   							#}
317   	 0060	 00004D40		a0=a0^a0//initialising accum to 0
318   	 0061	 81700064		do(_FILTER_LENGHT),>loop
319   	 0062	 80140011		x0=xmem[i1];i1+=1
320   	 0063	 84940010		y0=ymem[i0];i0+=1
321   	 0064	 00002408	%loop:a0+=x0*y0
322   							
323   							
324   							#return ret_val;
325   						
326   	 0065				_end_fir_basic:
327   							#return accums to prev state
328   							 #we have to decrement before putting any values because the pointer is currently pointing to 1 adress after value put on stack
329   	 0065	 8A140027		a2=xmem[i7] ; i7 -= 1;
330   							# return index regs to prev stat
331   	 0066	 B3140027		i3=xmem[i7] ; i7-=1;
332   	 0067	 81880000		ret
333   						
334   							.endif
335   							
				 SYMBOL TABLE 

    Name                                                                                    Type                  Value 

STRUCTURE_INITIALIZATION_STRNG                                                  			  Unused String		   '0x0, 0x1, 0x00000000' 
_BLOCK_SIZE                                                                     					 Number				          16 (10H)
_COMMON_INC_PATH_                                                               					 Define                 "C:/CirrusDSP/crystal32/common/inc/"
_C_CH                                                                           					 Number				          4 (4H)
_DSP_                                                                           			  Unused Variable		        0 (0H)
_FILTER_LENGHT                                                                  					 Number				          23 (17H)
_LOCAL_INC_PATH_                                                                					 Define                 "inc/"
_LOCAL_SRC_PATH_                                                                					 Define                 "src/"
_LS_CH                                                                          					 Number				          2 (2H)
_L_CH                                                                           			  Unused Number				     0 (0H)
_PROC_ASM                                                                       			  Unused Relocatable        __INIT:0000H
_ROUTER_INC_PATH_                                                               					 Define                 "rom_inc/"
_RS_CH                                                                          					 Number				          3 (3H)
_R_CH                                                                           					 Number				          1 (1H)
__CASM_VER__                                                                    			  Unused Variable		        0 (701H)
_end_fir_basic                                                                  			  Unused Relocatable        proc_GEN_0000:0065H
_end_processing                                                                 			  Unused Relocatable        proc_GEN_0000:004CH
_fir_basic                                                                      			         Relocatable         proc_GEN_0000:0057H
_hpfCoefs                                                                       					 External   
_hpfHistoryBuffer                                                               					 External   
_inputGain                                                                      					 External   
_limiterThreshold                                                               					 External   
_lpfCoefs                                                                       					 External   
_lpfHistoryBuffer                                                               					 External   
_meter_h_                                                                       			  Unused Relocatable        __INIT:0000H
_modeFlag                                                                       					 External   
_processing                                                                     			  Public Relocatable       proc_GEN_0000:0000H
_response_h_                                                                    			  Unused Relocatable        __INIT:0000H
_saturation                                                                     					 External   
example_module_MCV                                                              					 External   
isDefined                                                                       			  Unused Number				      1 (1H)

	       SEGMENTS:

Size			  Name										 Class
0000H	 __INIT                                  			 CODE                                    
0068H	 proc_GEN_0000                           			 CODE_OVLY                               
