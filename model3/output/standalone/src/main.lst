1     	 0000					.extern ___TIMER0_COUNT
2     	 0000					.extern ___TIMER1_COUNT
3     	 0000					.extern ___TIMER1_ENABLE
4     	 0000					.public _enableFlag
5     	 0000					.public _hpfCoefs
6     	 0000					.public _hpfHistoryBuffer
7     	 0000					.public _inputGain
8     	 0000					.public _limiterThreshold
9     	 0000					.public _lpfCoefs
10    	 0000					.public _lpfHistoryBuffer
11    	 0000					.public _modeFlag
12    	 0000					.public _sampleBuffer
13    	 0000					.extern _cl_get_cycle_count
14    	 0000					.extern _cl_wavread_bits_per_sample
15    	 0000					.extern _cl_wavread_close
16    	 0000					.extern _cl_wavread_frame_rate
17    	 0000					.extern _cl_wavread_getnchannels
18    	 0000					.extern _cl_wavread_number_of_frames
19    	 0000					.extern _cl_wavread_open
20    	 0000					.extern _cl_wavread_recvsample
21    	 0000					.extern _cl_wavwrite_close
22    	 0000					.extern _cl_wavwrite_open
23    	 0000					.extern _cl_wavwrite_sendsample
24    	 0000					.public _fir_basic
25    	 0000					.public _initGainProcessing
26    	 0000					.public _main
27    	 0000					.extern _printf
28    	 0000					.public _processing
29    	 0000					.public _saturation
30    	 0000					.extern _strcmp
31    	 0000					.extern _strcpy
32    	 0000					.extern __div
33    							.xdata_ovly
33     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
34    	 0000				__extractedConst_0_1
35    	 0000					.dw  (0x5a8240b8)
	 0000	 5A8240B8	 
36    							.xdata_ovly
36     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
37    	 0000				__extractedConst_1_1
38    	 0000					.dw  (0x8020c49c)
	 0000	 8020C49C	 
39    							.xdata_ovly
39     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
40    	 0000				__extractedConst_2_1
41    	 0000					.dw  (0x7fdf3b64)
	 0000	 7FDF3B64	 
42    							.xdata_ovly
42     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
43    	 0000				_enableFlag
44    	 0000					.bss (0x1)
45    							.ydata_ovly
45     >> start of macro: .ydata_ovly
1+    									seg_single , "Y_OVLY", Y
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_Y_ )
2+    						    segment
3+    						  .else
4+    						    segment "Y_OVLY"
5+    							.if "" != ""
6+    						___SegStart_Y_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .ydata_ovly
46    	 0000				_hpfCoefs
47    	 0000					.dw  (0xfcf349ef)
	 0000	 FCF349EF	 
48    	 0001					.dw  (0xfee7d5f5)
	 0001	 FEE7D5F5	 
49    	 0002					.dw  (0x1cc455e)
	 0002	 01CC455E	 
50    	 0003					.dw  (0x493cf47)
	 0003	 0493CF47	 
51    	 0004					.dw  (0x5fd287e)
	 0004	 05FD287E	 
52    	 0005					.dw  (0x4fbb46d)
	 0005	 04FBB46D	 
53    	 0006					.dw  (0x11a94ed)
	 0006	 011A94ED	 
54    	 0007					.dw  (0xfab6e925)
	 0007	 FAB6E925	 
55    	 0008					.dw  (0xf2fa6c36)
	 0008	 F2FA6C36	 
56    	 0009					.dw  (0xeb941083)
	 0009	 EB941083	 
57    	 000A					.dw  (0xe64254de)
	 000A	 E64254DE	 
58    	 000B					.dw  (0x64533dba)
	 000B	 64533DBA	 
59    	 000C					.dw  (0xe64254de)
	 000C	 E64254DE	 
60    	 000D					.dw  (0xeb941083)
	 000D	 EB941083	 
61    	 000E					.dw  (0xf2fa6c36)
	 000E	 F2FA6C36	 
62    	 000F					.dw  (0xfab6e925)
	 000F	 FAB6E925	 
63    	 0010					.dw  (0x11a94ed)
	 0010	 011A94ED	 
64    	 0011					.dw  (0x4fbb46d)
	 0011	 04FBB46D	 
65    	 0012					.dw  (0x5fd287e)
	 0012	 05FD287E	 
66    	 0013					.dw  (0x493cf47)
	 0013	 0493CF47	 
67    	 0014					.dw  (0x1cc455e)
	 0014	 01CC455E	 
68    	 0015					.dw  (0xfee7d5f5)
	 0015	 FEE7D5F5	 
69    	 0016					.dw  (0xfcf349ef)
	 0016	 FCF349EF	 
70    							.xdata_ovly
70     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
71    	 0000				_hpfHistoryBuffer
72    	 0000					.bss (0x17)
73    							.xdata_ovly
73     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
74    	 0000				_inputGain
75    	 0000					.bss (0x1)
76    							.xdata_ovly
76     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
77    	 0000				_limiterThreshold
78    	 0000					.dw  (0x7fdf3b64)
	 0000	 7FDF3B64	 
79    							.ydata_ovly
79     >> start of macro: .ydata_ovly
1+    									seg_single , "Y_OVLY", Y
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_Y_ )
2+    						    segment
3+    						  .else
4+    						    segment "Y_OVLY"
5+    							.if "" != ""
6+    						___SegStart_Y_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .ydata_ovly
80    	 0000				_lpfCoefs
81    	 0000					.dw  (0x30cb610)
	 0000	 030CB610	 
82    	 0001					.dw  (0x1182a0a)
	 0001	 01182A0A	 
83    	 0002					.dw  (0xfe33baa1)
	 0002	 FE33BAA1	 
84    	 0003					.dw  (0xfb6c30b8)
	 0003	 FB6C30B8	 
85    	 0004					.dw  (0xfa02d781)
	 0004	 FA02D781	 
86    	 0005					.dw  (0xfb044b92)
	 0005	 FB044B92	 
87    	 0006					.dw  (0xfee56b12)
	 0006	 FEE56B12	 
88    	 0007					.dw  (0x54916da)
	 0007	 054916DA	 
89    	 0008					.dw  (0xd0593c9)
	 0008	 0D0593C9	 
90    	 0009					.dw  (0x146bef7c)
	 0009	 146BEF7C	 
91    	 000A					.dw  (0x19bdab21)
	 000A	 19BDAB21	 
92    	 000B					.dw  (0x1bacc245)
	 000B	 1BACC245	 
93    	 000C					.dw  (0x19bdab21)
	 000C	 19BDAB21	 
94    	 000D					.dw  (0x146bef7c)
	 000D	 146BEF7C	 
95    	 000E					.dw  (0xd0593c9)
	 000E	 0D0593C9	 
96    	 000F					.dw  (0x54916da)
	 000F	 054916DA	 
97    	 0010					.dw  (0xfee56b12)
	 0010	 FEE56B12	 
98    	 0011					.dw  (0xfb044b92)
	 0011	 FB044B92	 
99    	 0012					.dw  (0xfa02d781)
	 0012	 FA02D781	 
100   	 0013					.dw  (0xfb6c30b8)
	 0013	 FB6C30B8	 
101   	 0014					.dw  (0xfe33baa1)
	 0014	 FE33BAA1	 
102   	 0015					.dw  (0x1182a0a)
	 0015	 01182A0A	 
103   	 0016					.dw  (0x30cb610)
	 0016	 030CB610	 
104   							.xdata_ovly
104    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
105   	 0000				_lpfHistoryBuffer
106   	 0000					.bss (0x17)
107   							.xdata_ovly
107    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
108   	 0000				_modeFlag
109   	 0000					.bss (0x1)
110   							.ydata_ovly
110    >> start of macro: .ydata_ovly
1+    									seg_single , "Y_OVLY", Y
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_Y_ )
2+    						    segment
3+    						  .else
4+    						    segment "Y_OVLY"
5+    							.if "" != ""
6+    						___SegStart_Y_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .ydata_ovly
111   	 0000				_sampleBuffer
112   	 0000					.bss (0x80)
113   							.xdata_ovly
113    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
114   	 0000				_string_const_0
115   	 0000					.dw  (0x2d)
	 0000	 0000002D	 
116   	 0001					.dw  (0x30)
	 0001	 00000030	 
117   	 0002					.dw  (0x2e)
	 0002	 0000002E	 
118   	 0003					.dw  (0x39)
	 0003	 00000039	 
119   	 0004					.dw  (0x39)
	 0004	 00000039	 
120   	 0005					.dw  (0x39)
	 0005	 00000039	 
121   	 0006					.dw  (0x0)
	 0006	 00000000	 
122   							.xdata_ovly
122    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
123   	 0000				_string_const_1
124   	 0000					.dw  (0x30)
	 0000	 00000030	 
125   	 0001					.dw  (0x2e)
	 0001	 0000002E	 
126   	 0002					.dw  (0x39)
	 0002	 00000039	 
127   	 0003					.dw  (0x39)
	 0003	 00000039	 
128   	 0004					.dw  (0x39)
	 0004	 00000039	 
129   	 0005					.dw  (0x0)
	 0005	 00000000	 
130   							.xdata_ovly
130    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
131   	 0000				_string_const_2
132   	 0000					.dw  (0x31)
	 0000	 00000031	 
133   	 0001					.dw  (0x0)
	 0001	 00000000	 
134   							.xdata_ovly
134    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
135   	 0000				_string_const_3
136   	 0000					.dw  (0x31)
	 0000	 00000031	 
137   	 0001					.dw  (0x0)
	 0001	 00000000	 
138   							.xdata_ovly
138    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
139   	 0000				_string_const_4
140   	 0000					.dw  (0x45)
	 0000	 00000045	 
141   	 0001					.dw  (0x72)
	 0001	 00000072	 
142   	 0002					.dw  (0x72)
	 0002	 00000072	 
143   	 0003					.dw  (0x6f)
	 0003	 0000006F	 
144   	 0004					.dw  (0x72)
	 0004	 00000072	 
145   	 0005					.dw  (0x3a)
	 0005	 0000003A	 
146   	 0006					.dw  (0x20)
	 0006	 00000020	 
147   	 0007					.dw  (0x43)
	 0007	 00000043	 
148   	 0008					.dw  (0x6f)
	 0008	 0000006F	 
149   	 0009					.dw  (0x75)
	 0009	 00000075	 
150   	 000A					.dw  (0x6c)
	 000A	 0000006C	 
151   	 000B					.dw  (0x64)
	 000B	 00000064	 
152   	 000C					.dw  (0x20)
	 000C	 00000020	 
153   	 000D					.dw  (0x6e)
	 000D	 0000006E	 
154   	 000E					.dw  (0x6f)
	 000E	 0000006F	 
155   	 000F					.dw  (0x74)
	 000F	 00000074	 
156   	 0010					.dw  (0x20)
	 0010	 00000020	 
157   	 0011					.dw  (0x6f)
	 0011	 0000006F	 
158   	 0012					.dw  (0x70)
	 0012	 00000070	 
159   	 0013					.dw  (0x65)
	 0013	 00000065	 
160   	 0014					.dw  (0x6e)
	 0014	 0000006E	 
161   	 0015					.dw  (0x20)
	 0015	 00000020	 
162   	 0016					.dw  (0x77)
	 0016	 00000077	 
163   	 0017					.dw  (0x61)
	 0017	 00000061	 
164   	 0018					.dw  (0x76)
	 0018	 00000076	 
165   	 0019					.dw  (0x65)
	 0019	 00000065	 
166   	 001A					.dw  (0x66)
	 001A	 00000066	 
167   	 001B					.dw  (0x69)
	 001B	 00000069	 
168   	 001C					.dw  (0x6c)
	 001C	 0000006C	 
169   	 001D					.dw  (0x65)
	 001D	 00000065	 
170   	 001E					.dw  (0x2e)
	 001E	 0000002E	 
171   	 001F					.dw  (0xa)
	 001F	 0000000A	 
172   	 0020					.dw  (0x0)
	 0020	 00000000	 
173   							.xdata_ovly
173    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
174   	 0000				_string_const_5
175   	 0000					.dw  (0x45)
	 0000	 00000045	 
176   	 0001					.dw  (0x72)
	 0001	 00000072	 
177   	 0002					.dw  (0x72)
	 0002	 00000072	 
178   	 0003					.dw  (0x6f)
	 0003	 0000006F	 
179   	 0004					.dw  (0x72)
	 0004	 00000072	 
180   	 0005					.dw  (0x3a)
	 0005	 0000003A	 
181   	 0006					.dw  (0x20)
	 0006	 00000020	 
182   	 0007					.dw  (0x43)
	 0007	 00000043	 
183   	 0008					.dw  (0x6f)
	 0008	 0000006F	 
184   	 0009					.dw  (0x75)
	 0009	 00000075	 
185   	 000A					.dw  (0x6c)
	 000A	 0000006C	 
186   	 000B					.dw  (0x64)
	 000B	 00000064	 
187   	 000C					.dw  (0x20)
	 000C	 00000020	 
188   	 000D					.dw  (0x6e)
	 000D	 0000006E	 
189   	 000E					.dw  (0x6f)
	 000E	 0000006F	 
190   	 000F					.dw  (0x74)
	 000F	 00000074	 
191   	 0010					.dw  (0x20)
	 0010	 00000020	 
192   	 0011					.dw  (0x6f)
	 0011	 0000006F	 
193   	 0012					.dw  (0x70)
	 0012	 00000070	 
194   	 0013					.dw  (0x65)
	 0013	 00000065	 
195   	 0014					.dw  (0x6e)
	 0014	 0000006E	 
196   	 0015					.dw  (0x20)
	 0015	 00000020	 
197   	 0016					.dw  (0x77)
	 0016	 00000077	 
198   	 0017					.dw  (0x61)
	 0017	 00000061	 
199   	 0018					.dw  (0x76)
	 0018	 00000076	 
200   	 0019					.dw  (0x65)
	 0019	 00000065	 
201   	 001A					.dw  (0x66)
	 001A	 00000066	 
202   	 001B					.dw  (0x69)
	 001B	 00000069	 
203   	 001C					.dw  (0x6c)
	 001C	 0000006C	 
204   	 001D					.dw  (0x65)
	 001D	 00000065	 
205   	 001E					.dw  (0x2e)
	 001E	 0000002E	 
206   	 001F					.dw  (0xa)
	 001F	 0000000A	 
207   	 0020					.dw  (0x0)
	 0020	 00000000	 
208   							.xdata_ovly
208    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
209   	 0000				_string_const_6
210   	 0000					.dw  (0x25)
	 0000	 00000025	 
211   	 0001					.dw  (0x6c)
	 0001	 0000006C	 
212   	 0002					.dw  (0x6c)
	 0002	 0000006C	 
213   	 0003					.dw  (0x75)
	 0003	 00000075	 
214   	 0004					.dw  (0xa)
	 0004	 0000000A	 
215   	 0005					.dw  (0x0)
	 0005	 00000000	 
216   							.code_ovly
216    >> start of macro: .code_ovly
1+    									seg_single , "CODE_OVLY", CODE
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_CODE_ )
2+    						    segment
3+    						  .else
4+    						    segment "CODE_OVLY"
5+    							.if "" != ""
6+    						___SegStart_CODE_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .code_ovly
217   						
218   						
219   						
220   	 0000				_fir_basic:			/* LN: 54 | CYCLE: 0 | RULES: () */ 
221   	 0000	 B0090038		i4 = i0			# LN: 54 | 
222   	 0001	 00004DC1		a1 = 0			# LN: 57 | 
223   	 0002	 80150015		i0 = i1 + (0x15)			# LN: 62 | 
224   	 0003	 81150016		i1 = i1 + (0x16)			# LN: 63 | 
225   	 0004	 81600006		do (0x16), label_end_92			# LN: 66 | 
226   	 0005				label_begin_92:			/* LN: 66 | CYCLE: 0 | RULES: () */ 
227   	 0005	 8C140020		b0 = xmem[i0]; i0 -= 1			# LN: 68, 69 | 
228   	 0006				label_end_92:			# LN: 66 | CYCLE: 1 | RULES: ()
229   	 0006	 9C540021		xmem[i1] = b0h; i1 -= 1			# LN: 68, 70 | 
230   	 0007				for_end_1:			/* LN: 66 | CYCLE: 0 | RULES: () */ 
231   	 0007	 02087FFF		i0 += 1			# LN: 73 | 
232   	 0008	 98540000		xmem[i0] = a0h			# LN: 75 | 
233   	 0009	 8170000C		do (0x17), label_end_93			# LN: 81 | 
234   	 000A				label_begin_93:			/* LN: 81 | CYCLE: 0 | RULES: () */ 
235   	 000A	 08884C08		x0 = xmem[i0]; i0 += 1; y0 = ymem[i4]; i4 += 1; a0 =+ a1			# LN: 83, 87, 83, 86, 85 | 
236   	 000B	 00002408		a0 += y0 * x0			# LN: 85 | 
237   	 000C				label_end_93:			# LN: 81 | CYCLE: 2 | RULES: ()
238   	 000C	 48497FFF		a1 = a0			# LN: 85 | 
239   	 000D				for_end_2:			/* LN: 81 | CYCLE: 0 | RULES: () */ 
240   	 000D	 00004C08		a0 =+ a1			# LN: 89 | 
241   	 000E	 81880000		ret			# LN: 90 | 
242   						
243   						
244   						
245   	 000F				_initGainProcessing:			/* LN: 35 | CYCLE: 0 | RULES: () */ 
246   	 000F	 98440000		xmem[_inputGain + 0] = a0h			# LN: 41 | 
247   	 0010	 A0050000		i0 = (0) + (_hpfHistoryBuffer + 0)			# LN: 42 | 
248   	 0011	 A1050000		i1 = (0) + (_lpfHistoryBuffer + 0)			# LN: 43 | 
249   	 0012	 81700015		do (0x17), label_end_95			# LN: 44 | 
250   	 0013				label_begin_95:			/* LN: 44 | CYCLE: 0 | RULES: () */ 
251   	 0013	 00004DC0		a0 = 0			# LN: 46 | 
252   	 0014	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 46, 48 | 
253   	 0015				label_end_95:			# LN: 44 | CYCLE: 2 | RULES: ()
254   	 0015	 98540011		xmem[i1] = a0h; i1 += 1			# LN: 47, 49 | 
255   	 0016				for_end_0:			/* LN: 44 | CYCLE: 0 | RULES: () */ 
256   	 0016	 81880000		ret			# LN: 52 | 
257   						
258   						
259   						
260   							# This construction should ensure linking of crt0 in case when target is a standalone program without the OS
261   							.if defined(_OVLY_)
262   								.if .strcmp('standalone',_OVLY_)=0
263   								.if .strcmp('crystal32',_TARGET_FAMILY_)=0
264   	 0000							.extern __start         # dummy use of __start to force linkage of crt0
265   	 0000				dummy		.equ(__start)
266   								.else
267   									.extern __intvec         # dummy use of __intvec to force linkage of intvec
268   						dummy		.equ(__intvec)
269   								.endif
270   								.endif
271   							.endif
272   						
273   	 0017				_main:			/* LN: 207 | CYCLE: 0 | RULES: () */ 
274   	 0017	 B2540017		xmem[i7] = i2; i7 += 1			# LN: 207, 207 | 
275   	 0018	 A2540017		xmem[i7] = a2g; i7 += 1			# LN: 207, 207 | 
276   	 0019	 9A540017		xmem[i7] = a2h; i7 += 1			# LN: 207, 207 | 
277   	 001A	 92540017		xmem[i7] = a2l; i7 += 1			# LN: 207, 207 | 
278   	 001B	 A3540017		xmem[i7] = a3g; i7 += 1			# LN: 207, 207 | 
279   	 001C	 9B540017		xmem[i7] = a3h; i7 += 1			# LN: 207, 207 | 
280   	 001D	 93540017		xmem[i7] = a3l; i7 += 1			# LN: 207, 207 | 
281   	 001E	 B3540017		xmem[i7] = i3; i7 += 1			# LN: 207, 207 | 
282   	 001F	 A6540017		xmem[i7] = b2g; i7 += 1			# LN: 207, 207 | 
283   	 0020	 9E540017		xmem[i7] = b2h; i7 += 1			# LN: 207, 207 | 
284   	 0021	 96540017		xmem[i7] = b2l; i7 += 1			# LN: 207, 207 | 
285   	 0022	 87750200		i7 = i7 + (0x200)			# LN: 207 | 
286   	 0023	 B0090032		i2 = i0			# LN: 207 | 
287   	 0024	 8A040000		a2 = xmem[__extractedConst_0_1 + 0]			# LN: 227 | 
288   	 0025	 00004DC1		a1 = 0			# LN: 229 | 
289   	 0026	 8C4A0001		uhalfword(b0) = (0x1)			# LN: 228 | 
290   	 0027	 9C440000		xmem[_enableFlag + 0] = b0h			# LN: 228 | 
291   	 0028	 99440000		xmem[_modeFlag + 0] = a1h			# LN: 229 | 
292   	 0029	 894A0005		uhalfword(a1) = (0x5)			# LN: 231 | 
293   	 002A	 00004F08		a0 - a1			# LN: 231 | 
294   	 002B	 84480052		if (a != 0) jmp (else_3)			# LN: 231 | 
295   	 002C	 80250003		i0 = i2 + (0x3)			# LN: 232 | 
296   	 002D	 B0140000		i0 = xmem[i0]			# LN: 232 | 
297   	 002E	 A1050000		i1 = (0) + (_string_const_0)			# LN: 232 | 
298   	 002F	 80880000		call (_strcmp)			# LN: 232 | 
299   	 0030	 00004E80		a0 & a0			# LN: 232 | 
300   	 0031	 84480034		if (a != 0) jmp (else_4)			# LN: 232 | 
301   	 0032	 8A040000		a2 = xmem[__extractedConst_1_1 + 0]			# LN: 233 | 
302   	 0033	 8008003B		jmp (endif_4)			# LN: 233 | 
303   	 0034				else_4:			/* LN: 232 | CYCLE: 0 | RULES: () */ 
304   	 0034	 80250003		i0 = i2 + (0x3)			# LN: 234 | 
305   	 0035	 B0140000		i0 = xmem[i0]			# LN: 234 | 
306   	 0036	 A1050000		i1 = (0) + (_string_const_1)			# LN: 234 | 
307   	 0037	 80880000		call (_strcmp)			# LN: 234 | 
308   	 0038	 00004E80		a0 & a0			# LN: 234 | 
309   	 0039	 8448003B		if (a != 0) jmp (else_5)			# LN: 234 | 
310   	 003A	 8A040000		a2 = xmem[__extractedConst_2_1 + 0]			# LN: 235 | 
311   	 003B				endif_4:			/* LN: 232 | CYCLE: 0 | RULES: () */ 
312   	 003B				endif_5:			/* LN: 234 | CYCLE: 0 | RULES: () */ 
313   	 003B				else_5:			/* LN: 234 | CYCLE: 0 | RULES: () */ 
314   	 003B	 B2090030		i0 = i2			# LN: 236 | 
315   	 003C	 A1050000		i1 = (0) + (_string_const_2)			# LN: 236 | 
316   	 003D	 02287FFF		i0 += 2			# LN: 236 | 
317   	 003E	 B0140000		i0 = xmem[i0]			# LN: 236 | 
318   	 003F	 80880000		call (_strcmp)			# LN: 236 | 
319   	 0040	 00004E80		a0 & a0			# LN: 236 | 
320   	 0041	 84480045		if (a != 0) jmp (else_6)			# LN: 236 | 
321   	 0042	 884A0001		uhalfword(a0) = (0x1)			# LN: 237 | 
322   	 0043	 98440000		xmem[_enableFlag + 0] = a0h			# LN: 237 | 
323   	 0044	 80080047		jmp (endif_6)			# LN: 237 | 
324   	 0045				else_6:			/* LN: 236 | CYCLE: 0 | RULES: () */ 
325   	 0045	 00004DC0		a0 = 0			# LN: 239 | 
326   	 0046	 98440000		xmem[_enableFlag + 0] = a0h			# LN: 239 | 
327   	 0047				endif_6:			/* LN: 236 | CYCLE: 0 | RULES: () */ 
328   	 0047	 80250004		i0 = i2 + (0x4)			# LN: 240 | 
329   	 0048	 B0140000		i0 = xmem[i0]			# LN: 240 | 
330   	 0049	 A1050000		i1 = (0) + (_string_const_3)			# LN: 240 | 
331   	 004A	 80880000		call (_strcmp)			# LN: 240 | 
332   	 004B	 00004E80		a0 & a0			# LN: 240 | 
333   	 004C	 84480050		if (a != 0) jmp (else_7)			# LN: 240 | 
334   	 004D	 884A0001		uhalfword(a0) = (0x1)			# LN: 241 | 
335   	 004E	 98440000		xmem[_modeFlag + 0] = a0h			# LN: 241 | 
336   	 004F	 80080052		jmp (else_3)			# LN: 241 | 
337   	 0050				else_7:			/* LN: 240 | CYCLE: 0 | RULES: () */ 
338   	 0050	 00004DC0		a0 = 0			# LN: 243 | 
339   	 0051	 98440000		xmem[_modeFlag + 0] = a0h			# LN: 243 | 
340   	 0052				endif_3:			/* LN: 231 | CYCLE: 0 | RULES: () */ 
341   	 0052				else_3:			/* LN: 231 | CYCLE: 0 | RULES: () */ 
342   	 0052	 00004DC0		a0 = 0			# LN: 247 | 
343   	 0053	 80800061		do (0x8), label_end_97			# LN: 247 | 
344   	 0054				label_begin_97:			/* LN: 247 | CYCLE: 0 | RULES: () */ 
345   	 0054	 00004DC1		a1 = 0			# LN: 248 | 
346   	 0055	 8100005F		do (0x10), label_end_96			# LN: 248 | 
347   	 0056				label_begin_96:			/* LN: 248 | CYCLE: 0 | RULES: () */ 
348   	 0056	 00004C24		b0 =+ a0			# LN: 249 | 
349   	 0057	 00004EC4		b0 = b0 << 4			# LN: 249 | 
350   	 0058	 4C704DC4		i0 = b0; b0 = 0			# LN: 249, 249 | 
351   	 0059	 8D4A0001		uhalfword(b1) = (0x1)			# LN: 248 | 
352   	 005A	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 249 | 
353   	 005B	 0B707FFF		a3 = i0			# LN: 249 | 
354   	 005C	 0000458B		a3 = a3 + a1			# LN: 249 | 
355   	 005D	 9B090030		AnyReg(i0, a3h)			# LN: 249 | 
356   	 005E	 000044A9		a1 = a1 + b1			# LN: 248 | 
357   	 005F				label_end_96:			# LN: 248 | CYCLE: 9 | RULES: ()
358   	 005F	 9CD40000		ymem[i0] = b0h			# LN: 249 | 
359   	 0060				init_latch_label_5:			/* LN: 249 | CYCLE: 0 | RULES: () */ 
360   	 0060				for_end_5:			/* LN: 248 | CYCLE: 0 | RULES: () */ 
361   	 0060	 894A0001		uhalfword(a1) = (0x1)			# LN: 247 | 
362   	 0061				label_end_97:			# LN: 247 | CYCLE: 1 | RULES: ()
363   	 0061	 00004408		a0 = a0 + a1			# LN: 247 | 
364   	 0062				for_end_4:			/* LN: 247 | CYCLE: 0 | RULES: () */ 
365   	 0062	 B1140002		i1 = xmem[i2]			# LN: 253 | 
366   	 0063	 90750100		i0 = i7 - (256 - 0)			# LN: 253 | 
367   	 0064	 80880000		call (_strcpy)			# LN: 253 | 
368   	 0065	 90750100		i0 = i7 - (256 - 0)			# LN: 254 | 
369   	 0066	 80880000		call (_cl_wavread_open)			# LN: 254 | 
370   	 0067	 98090033		AnyReg(i3, a0h)			# LN: 254 | 
371   	 0068	 08737FFF		a0 = i3			# LN: 255 | 
372   	 0069	 00004E80		a0 & a0			# LN: 255 | 
373   	 006A	 8448006F		if (a != 0) jmp (else_8)			# LN: 255 | 
374   	 006B	 A0050000		i0 = (0) + (_string_const_4)			# LN: 257 | 
375   	 006C	 80880000		call (_printf)			# LN: 257 | 
376   	 006D	 886AFFFF		halfword(a0) = (0xffff)			# LN: 258 | 
377   	 006E	 800800CF		jmp (__epilogue_242)			# LN: 258 | 
378   	 006F				endif_8:			/* LN: 255 | CYCLE: 0 | RULES: () */ 
379   	 006F				else_8:			/* LN: 255 | CYCLE: 0 | RULES: () */ 
380   	 006F	 B3090030		i0 = i3			# LN: 264 | 
381   	 0070	 80880000		call (_cl_wavread_getnchannels)			# LN: 264 | 
382   	 0071	 020A4C03		i2 += 1; a3 =+ a0			# LN: 272, 264 | 
383   	 0072	 B3090030		i0 = i3			# LN: 265 | 
384   	 0073	 80880000		call (_cl_wavread_bits_per_sample)			# LN: 265 | 
385   	 0074	 00004C01		a1 =+ a0			# LN: 265 | 
386   	 0075	 B3090030		i0 = i3			# LN: 266 | 
387   	 0076	 80880000		call (_cl_wavread_frame_rate)			# LN: 266 | 
388   	 0077	 00004C24		b0 =+ a0			# LN: 266 | 
389   	 0078	 B3090030		i0 = i3			# LN: 267 | 
390   	 0079	 80880000		call (_cl_wavread_number_of_frames)			# LN: 267 | 
391   	 007A	 90750200		i0 = i7 - (512 - 0)			# LN: 272 | 
392   	 007B	 00004C25		b1 =+ a0			# LN: 267 | 
393   	 007C	 B1140002		i1 = xmem[i2]			# LN: 272 | 
394   	 007D	 00004C3E		b2 =+ a3			# LN: 273 | 
395   	 007E	 80880000		call (_strcpy)			# LN: 272 | 
396   	 007F	 88040000		a0 = xmem[_enableFlag + 0]			# LN: 274 | 
397   	 0080	 00004E80		a0 & a0			# LN: 274 | 
398   	 0081	 84080083		if (a == 0) jmp (else_9)			# LN: 274 | 
399   	 0082	 8E4A0005		uhalfword(b2) = (0x5)			# LN: 275 | 
400   	 0083				endif_9:			/* LN: 274 | CYCLE: 0 | RULES: () */ 
401   	 0083				else_9:			/* LN: 274 | CYCLE: 0 | RULES: () */ 
402   	 0083	 90750200		i0 = i7 - (512 - 0)			# LN: 278 | 
403   	 0084	 00004C08		a0 =+ a1			# LN: 278 | 
404   	 0085	 00004C31		a1 =+ b2			# LN: 278 | 
405   	 0086	 80880000		call (_cl_wavwrite_open)			# LN: 278 | 
406   	 0087	 98090032		AnyReg(i2, a0h)			# LN: 278 | 
407   	 0088	 08727FFF		a0 = i2			# LN: 279 | 
408   	 0089	 00004E80		a0 & a0			# LN: 279 | 
409   	 008A	 8448008F		if (a != 0) jmp (else_10)			# LN: 279 | 
410   	 008B	 A0050000		i0 = (0) + (_string_const_5)			# LN: 281 | 
411   	 008C	 80880000		call (_printf)			# LN: 281 | 
412   	 008D	 886AFFFF		halfword(a0) = (0xffff)			# LN: 282 | 
413   	 008E	 800800CF		jmp (__epilogue_242)			# LN: 282 | 
414   	 008F				endif_10:			/* LN: 279 | CYCLE: 0 | RULES: () */ 
415   	 008F				else_10:			/* LN: 279 | CYCLE: 0 | RULES: () */ 
416   	 008F	 00004C10		a0 =+ a2			# LN: 287 | 
417   	 0090	 8088000F		call (_initGainProcessing)			# LN: 287 | 
418   	 0091	 894A0010		uhalfword(a1) = (0x10)			# LN: 296 | 
419   	 0092	 00004C28		a0 =+ b1			# LN: 296 | 
420   	 0093	 80880000		call (__div)			# LN: 296 | 
421   	 0094	 98090030		AnyReg(i0, a0h)			# LN: 296 | 
422   	 0095	 00007FFF		nop #empty cycle
423   	 0096	 800100C9		do (i0), label_end_102			# LN: 296 | 
424   	 0097				label_begin_102:			/* LN: 296 | CYCLE: 0 | RULES: () */ 
425   	 0097	 00004DC2		a2 = 0			# LN: 298 | 
426   	 0098	 810000A9		do (0x10), label_end_99			# LN: 298 | 
427   	 0099				label_begin_99:			/* LN: 298 | CYCLE: 0 | RULES: () */ 
428   	 0099	 9B090030		AnyReg(i0, a3h)			# LN: 300 | 
429   	 009A	 00004DC4		b0 = 0			# LN: 300 | 
430   	 009B	 800100A7		do (i0), label_end_98			# LN: 300 | 
431   	 009C				label_begin_98:			/* LN: 300 | CYCLE: 0 | RULES: () */ 
432   	 009C	 B3090030		i0 = i3			# LN: 302 | 
433   	 009D	 80880000		call (_cl_wavread_recvsample)			# LN: 302 | 
434   	 009E	 00005C01		a1 =+ a0; b1 =+ b0			# LN: 302, 303 | 
435   	 009F	 00004EC5		b1 = b1 << 4			# LN: 303 | 
436   	 00A0	 4D704C08		i0 = b1; a0 =+ a1			# LN: 303, 303 | 
437   	 00A1	 894A0001		uhalfword(a1) = (0x1)			# LN: 300 | 
438   	 00A2	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 303 | 
439   	 00A3	 0D70442C		b1 = i0; b0 = b0 + a1			# LN: 303, 300 | 
440   	 00A4	 00004529		a1 = a2 + b1			# LN: 303 | 
441   	 00A5	 99090030		AnyReg(i0, a1h)			# LN: 303 | 
442   	 00A6	 00007FFF		nop #empty cycle
443   	 00A7				label_end_98:			# LN: 300 | CYCLE: 11 | RULES: ()
444   	 00A7	 98D40000		ymem[i0] = a0h			# LN: 303 | 
445   	 00A8				init_latch_label_7:			/* LN: 305 | CYCLE: 0 | RULES: () */ 
446   	 00A8				for_end_8:			/* LN: 300 | CYCLE: 0 | RULES: () */ 
447   	 00A8	 884A0001		uhalfword(a0) = (0x1)			# LN: 298 | 
448   	 00A9				label_end_99:			# LN: 298 | CYCLE: 1 | RULES: ()
449   	 00A9	 00004502		a2 = a2 + a0			# LN: 298 | 
450   	 00AA				for_end_7:			/* LN: 298 | CYCLE: 0 | RULES: () */ 
451   	 00AA	 88040000		a0 = xmem[_enableFlag + 0]			# LN: 308 | 
452   	 00AB	 00004E80		a0 & a0			# LN: 308 | 
453   	 00AC	 840800B6		if (a == 0) jmp (else_11)			# LN: 308 | 
454   	 00AD	 80880000		call (_cl_get_cycle_count)			# LN: 310 | 
455   	 00AE	 A0050000		i0 = (0) + (_sampleBuffer)			# LN: 312 | 
456   	 00AF	 A1050000		i1 = (0) + (_sampleBuffer)			# LN: 312 | 
457   	 00B0	 00004C02		a2 =+ a0			# LN: 310 | 
458   	 00B1	 808800DD		call (_processing)			# LN: 312 | 
459   	 00B2	 80880000		call (_cl_get_cycle_count)			# LN: 314 | 
460   	 00B3	 00004450		a0 = a0 - a2			# LN: 315 | 
461   	 00B4	 A0050000		i0 = (0) + (_string_const_6)			# LN: 316 | 
462   	 00B5	 80880000		call (_printf)			# LN: 316 | 
463   	 00B6				endif_11:			/* LN: 308 | CYCLE: 0 | RULES: () */ 
464   	 00B6				else_11:			/* LN: 308 | CYCLE: 0 | RULES: () */ 
465   	 00B6	 00004DC1		a1 = 0			# LN: 319 | 
466   	 00B7	 810000C8		do (0x10), label_end_101			# LN: 319 | 
467   	 00B8				label_begin_101:			/* LN: 319 | CYCLE: 0 | RULES: () */ 
468   	 00B8	 9E090030		AnyReg(i0, b2h)			# LN: 321 | 
469   	 00B9	 00004DC4		b0 = 0			# LN: 321 | 
470   	 00BA	 800100C6		do (i0), label_end_100			# LN: 321 | 
471   	 00BB				label_begin_100:			/* LN: 321 | CYCLE: 0 | RULES: () */ 
472   	 00BB	 00004C20		a0 =+ b0			# LN: 323 | 
473   	 00BC	 00004EC0		a0 = a0 << 4			# LN: 323 | 
474   	 00BD	 48717FFF		i1 = a0			# LN: 323 | 
475   	 00BE	 B2090030		i0 = i2			# LN: 324 | 
476   	 00BF	 81150000		i1 = i1 + (_sampleBuffer + 0)			# LN: 323 | 
477   	 00C0	 08717FFF		a0 = i1			# LN: 323 | 
478   	 00C1	 00004408		a0 = a0 + a1			# LN: 323 | 
479   	 00C2	 98090031		AnyReg(i1, a0h)			# LN: 323 | 
480   	 00C3	 884A0001		uhalfword(a0) = (0x1)			# LN: 321 | 
481   	 00C4	 2D414424		b1 = ymem[i1]; b0 = b0 + a0			# LN: 323, 321 | 
482   	 00C5	 00004C28		a0 =+ b1			# LN: 323 | 
483   	 00C6				label_end_100:			# LN: 321 | CYCLE: 11 | RULES: ()
484   	 00C6	 80880000		call (_cl_wavwrite_sendsample)			# LN: 324 | 
485   	 00C7				init_latch_label_9:			/* LN: 326 | CYCLE: 0 | RULES: () */ 
486   	 00C7				for_end_10:			/* LN: 321 | CYCLE: 0 | RULES: () */ 
487   	 00C7	 884A0001		uhalfword(a0) = (0x1)			# LN: 319 | 
488   	 00C8				label_end_101:			# LN: 319 | CYCLE: 1 | RULES: ()
489   	 00C8	 00004481		a1 = a1 + a0			# LN: 319 | 
490   	 00C9				init_latch_label_10:			/* LN: 327 | CYCLE: 0 | RULES: () */ 
491   	 00C9				for_end_9:			/* LN: 319 | CYCLE: 0 | RULES: () */ 
492   	 00C9				label_end_102:			# LN: 296 | CYCLE: 0 | RULES: ()
493   	 00C9	 00007FFF		nop #empty cycle
494   	 00CA				for_end_6:			/* LN: 296 | CYCLE: 0 | RULES: () */ 
495   	 00CA	 B3090030		i0 = i3			# LN: 332 | 
496   	 00CB	 80880000		call (_cl_wavread_close)			# LN: 332 | 
497   	 00CC	 B2090030		i0 = i2			# LN: 333 | 
498   	 00CD	 80880000		call (_cl_wavwrite_close)			# LN: 333 | 
499   	 00CE	 00004DC0		a0 = 0			# LN: 336 | 
500   	 00CF				__epilogue_242:			/* LN: 337 | CYCLE: 0 | RULES: () */ 
501   	 00CF	 97750200		i7 = i7 - (0x200)			# LN: 337 | 
502   	 00D0	 02177FFF		i7 -= 1			# LN: 337 | 
503   	 00D1	 96140027		b2l = xmem[i7]; i7 -= 1			# LN: 337, 337 | 
504   	 00D2	 9E140027		b2h = xmem[i7]; i7 -= 1			# LN: 337, 337 | 
505   	 00D3	 A6140027		b2g = xmem[i7]; i7 -= 1			# LN: 337, 337 | 
506   	 00D4	 B3140027		i3 = xmem[i7]; i7 -= 1			# LN: 337, 337 | 
507   	 00D5	 93140027		a3l = xmem[i7]; i7 -= 1			# LN: 337, 337 | 
508   	 00D6	 9B140027		a3h = xmem[i7]; i7 -= 1			# LN: 337, 337 | 
509   	 00D7	 A3140027		a3g = xmem[i7]; i7 -= 1			# LN: 337, 337 | 
510   	 00D8	 92140027		a2l = xmem[i7]; i7 -= 1			# LN: 337, 337 | 
511   	 00D9	 9A140027		a2h = xmem[i7]; i7 -= 1			# LN: 337, 337 | 
512   	 00DA	 A2140027		a2g = xmem[i7]; i7 -= 1			# LN: 337, 337 | 
513   	 00DB	 B2140007		i2 = xmem[i7]			# LN: 337 | 
514   	 00DC	 81880000		ret			# LN: 337 | 
515   						
516   						
517   						
518   	 00DD				_processing:			/* LN: 108 | CYCLE: 0 | RULES: () */ 
519   	 00DD	 B2540017		xmem[i7] = i2; i7 += 1			# LN: 108, 108 | 
520   	 00DE	 B3540017		xmem[i7] = i3; i7 += 1			# LN: 108, 108 | 
521   	 00DF	 BA540017		xmem[i7] = i6; i7 += 1			# LN: 108, 108 | 
522   	 00E0	 87750003		i7 = i7 + (0x3)			# LN: 108 | 
523   	 00E1	 94750001		i4 = i7 - (0x1)			# LN: 111 | 
524   	 00E2	 B0540004		xmem[i4] = i0			# LN: 111 | 
525   	 00E3	 80050010		i0 = i0 + (0x10)			# LN: 112 | 
526   	 00E4	 94750002		i4 = i7 - (0x2)			# LN: 112 | 
527   	 00E5	 B0540004		xmem[i4] = i0			# LN: 112 | 
528   	 00E6	 B1090039		i5 = i1			# LN: 115 | 
529   	 00E7	 80150010		i0 = i1 + (0x10)			# LN: 116 | 
530   	 00E8	 94750003		i4 = i7 - (0x3)			# LN: 116 | 
531   	 00E9	 B0540004		xmem[i4] = i0			# LN: 116 | 
532   	 00EA	 80150040		i0 = i1 + (0x40)			# LN: 117 | 
533   	 00EB	 B0090032		i2 = i0			# LN: 117 | 
534   	 00EC	 80150030		i0 = i1 + (0x30)			# LN: 118 | 
535   	 00ED	 B0090033		i3 = i0			# LN: 118 | 
536   	 00EE	 80150020		i0 = i1 + (0x20)			# LN: 119 | 
537   	 00EF	 B009003A		i6 = i0			# LN: 119 | 
538   	 00F0	 81000130		do (0x10), label_end_94			# LN: 125 | 
539   	 00F1				label_begin_94:			/* LN: 125 | CYCLE: 0 | RULES: () */ 
540   	 00F1	 90750001		i0 = i7 - (0x1)			# LN: 129 | 
541   	 00F2	 B0140000		i0 = xmem[i0]			# LN: 129 | 
542   	 00F3	 80040000		x0 = xmem[_inputGain + 0]			# LN: 129 | 
543   	 00F4	 81940000		x1 = ymem[i0]			# LN: 129 | 
544   	 00F5	 00002020		a0 = x1 * x0			# LN: 129 | 
545   	 00F6	 484C7FFF		b0 = a0			# LN: 131 | 
546   	 00F7	 00004C20		a0 =+ b0			# LN: 131 | 
547   	 00F8	 80880137		call (_saturation)			# LN: 131 | 
548   	 00F9	 90750002		i0 = i7 - (0x2)			# LN: 134 | 
549   	 00FA	 B0140000		i0 = xmem[i0]			# LN: 134 | 
550   	 00FB	 98D40005		ymem[i5] = a0h			# LN: 131 | 
551   	 00FC	 80940000		x0 = ymem[i0]			# LN: 134 | 
552   	 00FD	 81040000		x1 = xmem[_inputGain + 0]			# LN: 134 | 
553   	 00FE	 00002080		a0 = x0 * x1			# LN: 134 | 
554   	 00FF	 484D7FFF		b1 = a0			# LN: 136 | 
555   	 0100	 00004C28		a0 =+ b1			# LN: 136 | 
556   	 0101	 80880137		call (_saturation)			# LN: 136 | 
557   	 0102	 90750003		i0 = i7 - (0x3)			# LN: 136 | 
558   	 0103	 B0140000		i0 = xmem[i0]			# LN: 136 | 
559   	 0104	 00007FFF		nop #empty cycle
560   	 0105	 98D40000		ymem[i0] = a0h			# LN: 136 | 
561   	 0106	 9CD40006		ymem[i6] = b0h			# LN: 139 | 
562   	 0107	 9DD40003		ymem[i3] = b1h			# LN: 140 | 
563   	 0108	 88040000		a0 = xmem[_modeFlag + 0]			# LN: 142 | 
564   	 0109	 00004E80		a0 & a0			# LN: 142 | 
565   	 010A	 8408011A		if (a == 0) jmp (else_2)			# LN: 142 | 
566   	 010B	 88940005		a0 = ymem[i5]			# LN: 144 | 
567   	 010C	 A0050000		i0 = (0) + (_hpfCoefs)			# LN: 144 | 
568   	 010D	 A1050000		i1 = (0) + (_hpfHistoryBuffer)			# LN: 144 | 
569   	 010E	 80880000		call (_fir_basic)			# LN: 144 | 
570   	 010F	 90750003		i0 = i7 - (0x3)			# LN: 145 | 
571   	 0110	 B0140000		i0 = xmem[i0]			# LN: 145 | 
572   	 0111	 98D40005		ymem[i5] = a0h			# LN: 144 | 
573   	 0112	 88940000		a0 = ymem[i0]			# LN: 145 | 
574   	 0113	 A0050000		i0 = (0) + (_lpfCoefs)			# LN: 145 | 
575   	 0114	 A1050000		i1 = (0) + (_lpfHistoryBuffer)			# LN: 145 | 
576   	 0115	 80880000		call (_fir_basic)			# LN: 145 | 
577   	 0116	 90750003		i0 = i7 - (0x3)			# LN: 145 | 
578   	 0117	 B0140000		i0 = xmem[i0]			# LN: 145 | 
579   	 0118	 00007FFF		nop #empty cycle
580   	 0119	 98D40000		ymem[i0] = a0h			# LN: 145 | 
581   	 011A				endif_2:			/* LN: 142 | CYCLE: 0 | RULES: () */ 
582   	 011A				else_2:			/* LN: 142 | CYCLE: 0 | RULES: () */ 
583   	 011A	 90750003		i0 = i7 - (0x3)			# LN: 156 | 
584   	 011B	 B0140000		i0 = xmem[i0]			# LN: 156 | 
585   	 011C	 88940015		a0 = ymem[i5]; i5 += 1			# LN: 155, 172 | 
586   	 011D	 89940010		a1 = ymem[i0]; i0 += 1			# LN: 156, 173 | 
587   	 011E	 91750003		i1 = i7 - (0x3)			# LN: 173 | 
588   	 011F	 B0540001		xmem[i1] = i0			# LN: 173 | 
589   	 0120	 48487FFF		a0 = a0			# LN: 161 | 
590   	 0121	 90750001		i0 = i7 - (0x1)			# LN: 169 | 
591   	 0122	 B0140000		i0 = xmem[i0]			# LN: 169 | 
592   	 0123	 49497FFF		a1 = a1			# LN: 161 | 
593   	 0124	 02084408		i0 += 1; a0 = a0 + a1			# LN: 169, 161 | 
594   	 0125	 91750001		i1 = i7 - (0x1)			# LN: 169 | 
595   	 0126	 B0540001		xmem[i1] = i0			# LN: 169 | 
596   	 0127	 90750002		i0 = i7 - (0x2)			# LN: 170 | 
597   	 0128	 B0140000		i0 = xmem[i0]			# LN: 170 | 
598   	 0129	 020E7FFF		i6 += 1			# LN: 174 | 
599   	 012A	 02087FFF		i0 += 1			# LN: 170 | 
600   	 012B	 91750002		i1 = i7 - (0x2)			# LN: 170 | 
601   	 012C	 B0540001		xmem[i1] = i0			# LN: 170 | 
602   	 012D	 48487FFF		a0 = a0			# LN: 162 | 
603   	 012E	 020B7FFF		i3 += 1			# LN: 175 | 
604   	 012F	 80880137		call (_saturation)			# LN: 162 | 
605   	 0130				label_end_94:			# LN: 125 | CYCLE: 22 | RULES: ()
606   	 0130	 98D40012		ymem[i2] = a0h; i2 += 1			# LN: 162, 176 | 
607   	 0131				for_end_3:			/* LN: 125 | CYCLE: 0 | RULES: () */ 
608   	 0131	 97750003		i7 = i7 - (0x3)			# LN: 179 | 
609   	 0132	 02177FFF		i7 -= 1			# LN: 179 | 
610   	 0133	 BA140027		i6 = xmem[i7]; i7 -= 1			# LN: 179, 179 | 
611   	 0134	 B3140027		i3 = xmem[i7]; i7 -= 1			# LN: 179, 179 | 
612   	 0135	 B2140007		i2 = xmem[i7]			# LN: 179 | 
613   	 0136	 81880000		ret			# LN: 179 | 
614   						
615   						
616   						
617   	 0137				_saturation:			/* LN: 92 | CYCLE: 0 | RULES: () */ 
618   	 0137	 89040000		a1 = xmem[_limiterThreshold + 0]			# LN: 95 | 
619   	 0138	 00004F08		a0 - a1			# LN: 95 | 
620   	 0139	 8508013C		if (a <= 0) jmp (else_0)			# LN: 95 | 
621   	 013A	 88040000		a0 = xmem[_limiterThreshold + 0]			# LN: 97 | 
622   	 013B	 80080143		jmp (__epilogue_238)			# LN: 97 | 
623   	 013C				else_0:			/* LN: 95 | CYCLE: 0 | RULES: () */ 
624   	 013C	 89040000		a1 = xmem[_limiterThreshold + 0]			# LN: 99 | 
625   	 013D	 00004C89		a1 =- a1			# LN: 99 | 
626   	 013E	 00004F08		a0 - a1			# LN: 99 | 
627   	 013F	 84C80143		if (a >= 0) jmp (else_1)			# LN: 99 | 
628   	 0140	 88040000		a0 = xmem[_limiterThreshold + 0]			# LN: 101 | 
629   	 0141	 00004C80		a0 =- a0			# LN: 101 | 
630   	 0142	 80080143		jmp (__epilogue_238)			# LN: 101 | 
631   	 0143				__epilogue_238:			/* LN: 105 | CYCLE: 0 | RULES: () */ 
632   	 0143				endif_0:			/* LN: 95 | CYCLE: 0 | RULES: () */ 
633   	 0143				endif_1:			/* LN: 99 | CYCLE: 0 | RULES: () */ 
634   	 0143				else_1:			/* LN: 99 | CYCLE: 0 | RULES: () */ 
635   	 0143	 81880000		ret			# LN: 105 | 
636   						(null)
				 SYMBOL TABLE 

    Name                                                                                    Type                  Value 

_COMMON_INC_PATH_                                                               					 Define                 "C:/CirrusDSP/crystal32/common/inc/"
_DSP_                                                                           					 Define                 "a"
_LOCAL_INC_PATH_                                                                					 Define                 "inc/"
_LOCAL_SRC_PATH_                                                                					 Define                 "src/"
_MUI_VERSION_                                                                   					 Define                 "020000"
_OVLY_                                                                          					 Define                 "standalone"
_OVLY_REVISION_                                                                 					 Define                 "020000"
_ROUTER_INC_PATH_                                                               					 Define                 "rom_inc/"
_SLOT_                                                                          					 Define                 "0"
_TARGET_FAMILY_                                                                 					 Define                 "crystal32"
_TOOLS_VERSION_                                                                 					 Define                 "0x0701"
_VERSION_                                                                       					 Define                 "00"
__CASM_VER__                                                                    			  Unused Variable		        0 (701H)
___TIMER0_COUNT                                                                 					 External   
___TIMER1_COUNT                                                                 					 External   
___TIMER1_ENABLE                                                                					 External   
__div                                                                           					 External   
__epilogue_238                                                                  			         Relocatable         main_GEN_0019:0143H
__epilogue_242                                                                  			         Relocatable         main_GEN_0019:00CFH
__extractedConst_0_1                                                            			         Relocatable         main_GEN_0000:0000H
__extractedConst_1_1                                                            			         Relocatable         main_GEN_0001:0000H
__extractedConst_2_1                                                            			         Relocatable         main_GEN_0002:0000H
__start                                                                         					 External   
_cl_get_cycle_count                                                             					 External   
_cl_wavread_bits_per_sample                                                     					 External   
_cl_wavread_close                                                               					 External   
_cl_wavread_frame_rate                                                          					 External   
_cl_wavread_getnchannels                                                        					 External   
_cl_wavread_number_of_frames                                                    					 External   
_cl_wavread_open                                                                					 External   
_cl_wavread_recvsample                                                          					 External   
_cl_wavwrite_close                                                              					 External   
_cl_wavwrite_open                                                               					 External   
_cl_wavwrite_sendsample                                                         					 External   
_enableFlag                                                                     			  Public Relocatable       main_GEN_0003:0000H
_fir_basic                                                                      			  Public Relocatable       main_GEN_0019:0000H
_hpfCoefs                                                                       			  Public Relocatable       main_GEN_0004:0000H
_hpfHistoryBuffer                                                               			  Public Relocatable       main_GEN_0005:0000H
_initGainProcessing                                                             			  Public Relocatable       main_GEN_0019:000FH
_inputGain                                                                      			  Public Relocatable       main_GEN_0006:0000H
_limiterThreshold                                                               			  Public Relocatable       main_GEN_0007:0000H
_lpfCoefs                                                                       			  Public Relocatable       main_GEN_0008:0000H
_lpfHistoryBuffer                                                               			  Public Relocatable       main_GEN_0009:0000H
_main                                                                           			  Public Relocatable       main_GEN_0019:0017H
_modeFlag                                                                       			  Public Relocatable       main_GEN_0010:0000H
_printf                                                                         					 External   
_processing                                                                     			  Public Relocatable       main_GEN_0019:00DDH
_sampleBuffer                                                                   			  Public Relocatable       main_GEN_0011:0000H
_saturation                                                                     			  Public Relocatable       main_GEN_0019:0137H
_strcmp                                                                         					 External   
_strcpy                                                                         					 External   
_string_const_0                                                                 			         Relocatable         main_GEN_0012:0000H
_string_const_1                                                                 			         Relocatable         main_GEN_0013:0000H
_string_const_2                                                                 			         Relocatable         main_GEN_0014:0000H
_string_const_3                                                                 			         Relocatable         main_GEN_0015:0000H
_string_const_4                                                                 			         Relocatable         main_GEN_0016:0000H
_string_const_5                                                                 			         Relocatable         main_GEN_0017:0000H
_string_const_6                                                                 			         Relocatable         main_GEN_0018:0000H
dummy                                                                           			  Unused Number				     0 (0H)
else_0                                                                          			         Relocatable         main_GEN_0019:013CH
else_1                                                                          			         Relocatable         main_GEN_0019:0143H
else_10                                                                         			         Relocatable         main_GEN_0019:008FH
else_11                                                                         			         Relocatable         main_GEN_0019:00B6H
else_2                                                                          			         Relocatable         main_GEN_0019:011AH
else_3                                                                          			         Relocatable         main_GEN_0019:0052H
else_4                                                                          			         Relocatable         main_GEN_0019:0034H
else_5                                                                          			         Relocatable         main_GEN_0019:003BH
else_6                                                                          			         Relocatable         main_GEN_0019:0045H
else_7                                                                          			         Relocatable         main_GEN_0019:0050H
else_8                                                                          			         Relocatable         main_GEN_0019:006FH
else_9                                                                          			         Relocatable         main_GEN_0019:0083H
endif_0                                                                         			  Unused Relocatable        main_GEN_0019:0143H
endif_1                                                                         			  Unused Relocatable        main_GEN_0019:0143H
endif_10                                                                        			  Unused Relocatable        main_GEN_0019:008FH
endif_11                                                                        			  Unused Relocatable        main_GEN_0019:00B6H
endif_2                                                                         			  Unused Relocatable        main_GEN_0019:011AH
endif_3                                                                         			  Unused Relocatable        main_GEN_0019:0052H
endif_4                                                                         			         Relocatable         main_GEN_0019:003BH
endif_5                                                                         			  Unused Relocatable        main_GEN_0019:003BH
endif_6                                                                         			         Relocatable         main_GEN_0019:0047H
endif_8                                                                         			  Unused Relocatable        main_GEN_0019:006FH
endif_9                                                                         			  Unused Relocatable        main_GEN_0019:0083H
for_end_0                                                                       			  Unused Relocatable        main_GEN_0019:0016H
for_end_1                                                                       			  Unused Relocatable        main_GEN_0019:0007H
for_end_10                                                                      			  Unused Relocatable        main_GEN_0019:00C7H
for_end_2                                                                       			  Unused Relocatable        main_GEN_0019:000DH
for_end_3                                                                       			  Unused Relocatable        main_GEN_0019:0131H
for_end_4                                                                       			  Unused Relocatable        main_GEN_0019:0062H
for_end_5                                                                       			  Unused Relocatable        main_GEN_0019:0060H
for_end_6                                                                       			  Unused Relocatable        main_GEN_0019:00CAH
for_end_7                                                                       			  Unused Relocatable        main_GEN_0019:00AAH
for_end_8                                                                       			  Unused Relocatable        main_GEN_0019:00A8H
for_end_9                                                                       			  Unused Relocatable        main_GEN_0019:00C9H
init_latch_label_10                                                             			  Unused Relocatable        main_GEN_0019:00C9H
init_latch_label_5                                                              			  Unused Relocatable        main_GEN_0019:0060H
init_latch_label_7                                                              			  Unused Relocatable        main_GEN_0019:00A8H
init_latch_label_9                                                              			  Unused Relocatable        main_GEN_0019:00C7H
label_begin_100                                                                 			  Unused Relocatable        main_GEN_0019:00BBH
label_begin_101                                                                 			  Unused Relocatable        main_GEN_0019:00B8H
label_begin_102                                                                 			  Unused Relocatable        main_GEN_0019:0097H
label_begin_92                                                                  			  Unused Relocatable        main_GEN_0019:0005H
label_begin_93                                                                  			  Unused Relocatable        main_GEN_0019:000AH
label_begin_94                                                                  			  Unused Relocatable        main_GEN_0019:00F1H
label_begin_95                                                                  			  Unused Relocatable        main_GEN_0019:0013H
label_begin_96                                                                  			  Unused Relocatable        main_GEN_0019:0056H
label_begin_97                                                                  			  Unused Relocatable        main_GEN_0019:0054H
label_begin_98                                                                  			  Unused Relocatable        main_GEN_0019:009CH
label_begin_99                                                                  			  Unused Relocatable        main_GEN_0019:0099H
label_end_100                                                                   			         Relocatable         main_GEN_0019:00C6H
label_end_101                                                                   			         Relocatable         main_GEN_0019:00C8H
label_end_102                                                                   			         Relocatable         main_GEN_0019:00C9H
label_end_92                                                                    			         Relocatable         main_GEN_0019:0006H
label_end_93                                                                    			         Relocatable         main_GEN_0019:000CH
label_end_94                                                                    			         Relocatable         main_GEN_0019:0130H
label_end_95                                                                    			         Relocatable         main_GEN_0019:0015H
label_end_96                                                                    			         Relocatable         main_GEN_0019:005FH
label_end_97                                                                    			         Relocatable         main_GEN_0019:0061H
label_end_98                                                                    			         Relocatable         main_GEN_0019:00A7H
label_end_99                                                                    			         Relocatable         main_GEN_0019:00A9H

	       SEGMENTS:

Size			  Name										 Class
0000H	 __INIT                                  			 CODE                                    
0001H	 main_GEN_0000                           			 X_OVLY                                  
0001H	 main_GEN_0001                           			 X_OVLY                                  
0001H	 main_GEN_0002                           			 X_OVLY                                  
0001H	 main_GEN_0003                           			 X_OVLY                                  
0017H	 main_GEN_0004                           			 Y_OVLY                                  
0017H	 main_GEN_0005                           			 X_OVLY                                  
0001H	 main_GEN_0006                           			 X_OVLY                                  
0001H	 main_GEN_0007                           			 X_OVLY                                  
0017H	 main_GEN_0008                           			 Y_OVLY                                  
0017H	 main_GEN_0009                           			 X_OVLY                                  
0001H	 main_GEN_0010                           			 X_OVLY                                  
0080H	 main_GEN_0011                           			 Y_OVLY                                  
0007H	 main_GEN_0012                           			 X_OVLY                                  
0006H	 main_GEN_0013                           			 X_OVLY                                  
0002H	 main_GEN_0014                           			 X_OVLY                                  
0002H	 main_GEN_0015                           			 X_OVLY                                  
0021H	 main_GEN_0016                           			 X_OVLY                                  
0021H	 main_GEN_0017                           			 X_OVLY                                  
0006H	 main_GEN_0018                           			 X_OVLY                                  
0144H	 main_GEN_0019                           			 CODE_OVLY                               
