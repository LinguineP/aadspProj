1     	 0000					.extern ___TIMER0_COUNT
2     	 0000					.extern ___TIMER1_COUNT
3     	 0000					.extern ___TIMER1_ENABLE
4     	 0000					.public _c1
5     	 0000					.public _c2
6     	 0000					.public _enableFlag
7     	 0000					.public _hpfCoefs
8     	 0000					.public _hpfHistoryBuffer
9     	 0000					.public _inChannels
10    	 0000					.public _inputGain
11    	 0000					.public _limiterThreshold
12    	 0000					.public _lpfCoefs
13    	 0000					.public _lpfHistoryBuffer
14    	 0000					.public _modeFlag
15    	 0000					.public _outChannels
16    	 0000					.public _sampleBuffer
17    	 0000					.public _spent_cycles
18    	 0000					.extern _cl_get_cycle_count
19    	 0000					.extern _cl_wavread_bits_per_sample
20    	 0000					.extern _cl_wavread_close
21    	 0000					.extern _cl_wavread_frame_rate
22    	 0000					.extern _cl_wavread_getnchannels
23    	 0000					.extern _cl_wavread_number_of_frames
24    	 0000					.extern _cl_wavread_open
25    	 0000					.extern _cl_wavread_recvsample
26    	 0000					.extern _cl_wavwrite_close
27    	 0000					.extern _cl_wavwrite_open
28    	 0000					.extern _cl_wavwrite_sendsample
29    	 0000					.public _fir_basic
30    	 0000					.public _initGainProcessing
31    	 0000					.public _main
32    	 0000					.extern _printf
33    	 0000					.extern _processing
34    	 0000					.public _saturation
35    	 0000					.extern _strcmp
36    	 0000					.extern _strcpy
37    	 0000					.extern __div
38    							.xdata_ovly
38     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
39    	 0000				__extractedConst_0_1
40    	 0000					.dw  (0x5a8240b8)
	 0000	 5A8240B8	 
41    							.xdata_ovly
41     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
42    	 0000				__extractedConst_1_1
43    	 0000					.dw  (0x8020c49c)
	 0000	 8020C49C	 
44    							.xdata_ovly
44     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
45    	 0000				__extractedConst_2_1
46    	 0000					.dw  (0x7fdf3b64)
	 0000	 7FDF3B64	 
47    							.xdata_ovly
47     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
48    	 0000				_c1
49    	 0000					.bss (0x2)
50    							.xdata_ovly
50     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
51    	 0000				_c2
52    	 0000					.bss (0x2)
53    							.xdata_ovly
53     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
54    	 0000				_enableFlag
55    	 0000					.bss (0x1)
56    							.ydata_ovly
56     >> start of macro: .ydata_ovly
1+    									seg_single , "Y_OVLY", Y
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_Y_ )
2+    						    segment
3+    						  .else
4+    						    segment "Y_OVLY"
5+    							.if "" != ""
6+    						___SegStart_Y_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .ydata_ovly
57    	 0000				_hpfCoefs
58    	 0000					.dw  (0xfcf349ef)
	 0000	 FCF349EF	 
59    	 0001					.dw  (0xfee7d5f5)
	 0001	 FEE7D5F5	 
60    	 0002					.dw  (0x1cc455e)
	 0002	 01CC455E	 
61    	 0003					.dw  (0x493cf47)
	 0003	 0493CF47	 
62    	 0004					.dw  (0x5fd287e)
	 0004	 05FD287E	 
63    	 0005					.dw  (0x4fbb46d)
	 0005	 04FBB46D	 
64    	 0006					.dw  (0x11a94ed)
	 0006	 011A94ED	 
65    	 0007					.dw  (0xfab6e925)
	 0007	 FAB6E925	 
66    	 0008					.dw  (0xf2fa6c36)
	 0008	 F2FA6C36	 
67    	 0009					.dw  (0xeb941083)
	 0009	 EB941083	 
68    	 000A					.dw  (0xe64254de)
	 000A	 E64254DE	 
69    	 000B					.dw  (0x64533dba)
	 000B	 64533DBA	 
70    	 000C					.dw  (0xe64254de)
	 000C	 E64254DE	 
71    	 000D					.dw  (0xeb941083)
	 000D	 EB941083	 
72    	 000E					.dw  (0xf2fa6c36)
	 000E	 F2FA6C36	 
73    	 000F					.dw  (0xfab6e925)
	 000F	 FAB6E925	 
74    	 0010					.dw  (0x11a94ed)
	 0010	 011A94ED	 
75    	 0011					.dw  (0x4fbb46d)
	 0011	 04FBB46D	 
76    	 0012					.dw  (0x5fd287e)
	 0012	 05FD287E	 
77    	 0013					.dw  (0x493cf47)
	 0013	 0493CF47	 
78    	 0014					.dw  (0x1cc455e)
	 0014	 01CC455E	 
79    	 0015					.dw  (0xfee7d5f5)
	 0015	 FEE7D5F5	 
80    	 0016					.dw  (0xfcf349ef)
	 0016	 FCF349EF	 
81    							.xdata_ovly
81     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
82    	 0000				_hpfHistoryBuffer
83    	 0000					.bss (0x17)
84    							.xdata_ovly
84     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
85    	 0000				_inChannels
86    	 0000					.bss (0x1)
87    							.xdata_ovly
87     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
88    	 0000				_inputGain
89    	 0000					.bss (0x1)
90    							.xdata_ovly
90     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
91    	 0000				_limiterThreshold
92    	 0000					.dw  (0x7fdf3b64)
	 0000	 7FDF3B64	 
93    							.ydata_ovly
93     >> start of macro: .ydata_ovly
1+    									seg_single , "Y_OVLY", Y
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_Y_ )
2+    						    segment
3+    						  .else
4+    						    segment "Y_OVLY"
5+    							.if "" != ""
6+    						___SegStart_Y_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .ydata_ovly
94    	 0000				_lpfCoefs
95    	 0000					.dw  (0x30cb610)
	 0000	 030CB610	 
96    	 0001					.dw  (0x1182a0a)
	 0001	 01182A0A	 
97    	 0002					.dw  (0xfe33baa1)
	 0002	 FE33BAA1	 
98    	 0003					.dw  (0xfb6c30b8)
	 0003	 FB6C30B8	 
99    	 0004					.dw  (0xfa02d781)
	 0004	 FA02D781	 
100   	 0005					.dw  (0xfb044b92)
	 0005	 FB044B92	 
101   	 0006					.dw  (0xfee56b12)
	 0006	 FEE56B12	 
102   	 0007					.dw  (0x54916da)
	 0007	 054916DA	 
103   	 0008					.dw  (0xd0593c9)
	 0008	 0D0593C9	 
104   	 0009					.dw  (0x146bef7c)
	 0009	 146BEF7C	 
105   	 000A					.dw  (0x19bdab21)
	 000A	 19BDAB21	 
106   	 000B					.dw  (0x1bacc245)
	 000B	 1BACC245	 
107   	 000C					.dw  (0x19bdab21)
	 000C	 19BDAB21	 
108   	 000D					.dw  (0x146bef7c)
	 000D	 146BEF7C	 
109   	 000E					.dw  (0xd0593c9)
	 000E	 0D0593C9	 
110   	 000F					.dw  (0x54916da)
	 000F	 054916DA	 
111   	 0010					.dw  (0xfee56b12)
	 0010	 FEE56B12	 
112   	 0011					.dw  (0xfb044b92)
	 0011	 FB044B92	 
113   	 0012					.dw  (0xfa02d781)
	 0012	 FA02D781	 
114   	 0013					.dw  (0xfb6c30b8)
	 0013	 FB6C30B8	 
115   	 0014					.dw  (0xfe33baa1)
	 0014	 FE33BAA1	 
116   	 0015					.dw  (0x1182a0a)
	 0015	 01182A0A	 
117   	 0016					.dw  (0x30cb610)
	 0016	 030CB610	 
118   							.xdata_ovly
118    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
119   	 0000				_lpfHistoryBuffer
120   	 0000					.bss (0x17)
121   							.xdata_ovly
121    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
122   	 0000				_modeFlag
123   	 0000					.bss (0x1)
124   							.xdata_ovly
124    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
125   	 0000				_outChannels
126   	 0000					.bss (0x1)
127   							.ydata_ovly
127    >> start of macro: .ydata_ovly
1+    									seg_single , "Y_OVLY", Y
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_Y_ )
2+    						    segment
3+    						  .else
4+    						    segment "Y_OVLY"
5+    							.if "" != ""
6+    						___SegStart_Y_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .ydata_ovly
128   	 0000				_sampleBuffer
129   	 0000					.bss (0x80)
130   							.xdata_ovly
130    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
131   	 0000				_spent_cycles
132   	 0000					.bss (0x2)
133   							.xdata_ovly
133    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
134   	 0000				_string_const_0
135   	 0000					.dw  (0x2d)
	 0000	 0000002D	 
136   	 0001					.dw  (0x30)
	 0001	 00000030	 
137   	 0002					.dw  (0x2e)
	 0002	 0000002E	 
138   	 0003					.dw  (0x39)
	 0003	 00000039	 
139   	 0004					.dw  (0x39)
	 0004	 00000039	 
140   	 0005					.dw  (0x39)
	 0005	 00000039	 
141   	 0006					.dw  (0x0)
	 0006	 00000000	 
142   							.xdata_ovly
142    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
143   	 0000				_string_const_1
144   	 0000					.dw  (0x30)
	 0000	 00000030	 
145   	 0001					.dw  (0x2e)
	 0001	 0000002E	 
146   	 0002					.dw  (0x39)
	 0002	 00000039	 
147   	 0003					.dw  (0x39)
	 0003	 00000039	 
148   	 0004					.dw  (0x39)
	 0004	 00000039	 
149   	 0005					.dw  (0x0)
	 0005	 00000000	 
150   							.xdata_ovly
150    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
151   	 0000				_string_const_2
152   	 0000					.dw  (0x31)
	 0000	 00000031	 
153   	 0001					.dw  (0x0)
	 0001	 00000000	 
154   							.xdata_ovly
154    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
155   	 0000				_string_const_3
156   	 0000					.dw  (0x31)
	 0000	 00000031	 
157   	 0001					.dw  (0x0)
	 0001	 00000000	 
158   							.xdata_ovly
158    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
159   	 0000				_string_const_4
160   	 0000					.dw  (0x45)
	 0000	 00000045	 
161   	 0001					.dw  (0x72)
	 0001	 00000072	 
162   	 0002					.dw  (0x72)
	 0002	 00000072	 
163   	 0003					.dw  (0x6f)
	 0003	 0000006F	 
164   	 0004					.dw  (0x72)
	 0004	 00000072	 
165   	 0005					.dw  (0x3a)
	 0005	 0000003A	 
166   	 0006					.dw  (0x20)
	 0006	 00000020	 
167   	 0007					.dw  (0x43)
	 0007	 00000043	 
168   	 0008					.dw  (0x6f)
	 0008	 0000006F	 
169   	 0009					.dw  (0x75)
	 0009	 00000075	 
170   	 000A					.dw  (0x6c)
	 000A	 0000006C	 
171   	 000B					.dw  (0x64)
	 000B	 00000064	 
172   	 000C					.dw  (0x20)
	 000C	 00000020	 
173   	 000D					.dw  (0x6e)
	 000D	 0000006E	 
174   	 000E					.dw  (0x6f)
	 000E	 0000006F	 
175   	 000F					.dw  (0x74)
	 000F	 00000074	 
176   	 0010					.dw  (0x20)
	 0010	 00000020	 
177   	 0011					.dw  (0x6f)
	 0011	 0000006F	 
178   	 0012					.dw  (0x70)
	 0012	 00000070	 
179   	 0013					.dw  (0x65)
	 0013	 00000065	 
180   	 0014					.dw  (0x6e)
	 0014	 0000006E	 
181   	 0015					.dw  (0x20)
	 0015	 00000020	 
182   	 0016					.dw  (0x77)
	 0016	 00000077	 
183   	 0017					.dw  (0x61)
	 0017	 00000061	 
184   	 0018					.dw  (0x76)
	 0018	 00000076	 
185   	 0019					.dw  (0x65)
	 0019	 00000065	 
186   	 001A					.dw  (0x66)
	 001A	 00000066	 
187   	 001B					.dw  (0x69)
	 001B	 00000069	 
188   	 001C					.dw  (0x6c)
	 001C	 0000006C	 
189   	 001D					.dw  (0x65)
	 001D	 00000065	 
190   	 001E					.dw  (0x2e)
	 001E	 0000002E	 
191   	 001F					.dw  (0xa)
	 001F	 0000000A	 
192   	 0020					.dw  (0x0)
	 0020	 00000000	 
193   							.xdata_ovly
193    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
194   	 0000				_string_const_5
195   	 0000					.dw  (0x45)
	 0000	 00000045	 
196   	 0001					.dw  (0x72)
	 0001	 00000072	 
197   	 0002					.dw  (0x72)
	 0002	 00000072	 
198   	 0003					.dw  (0x6f)
	 0003	 0000006F	 
199   	 0004					.dw  (0x72)
	 0004	 00000072	 
200   	 0005					.dw  (0x3a)
	 0005	 0000003A	 
201   	 0006					.dw  (0x20)
	 0006	 00000020	 
202   	 0007					.dw  (0x43)
	 0007	 00000043	 
203   	 0008					.dw  (0x6f)
	 0008	 0000006F	 
204   	 0009					.dw  (0x75)
	 0009	 00000075	 
205   	 000A					.dw  (0x6c)
	 000A	 0000006C	 
206   	 000B					.dw  (0x64)
	 000B	 00000064	 
207   	 000C					.dw  (0x20)
	 000C	 00000020	 
208   	 000D					.dw  (0x6e)
	 000D	 0000006E	 
209   	 000E					.dw  (0x6f)
	 000E	 0000006F	 
210   	 000F					.dw  (0x74)
	 000F	 00000074	 
211   	 0010					.dw  (0x20)
	 0010	 00000020	 
212   	 0011					.dw  (0x6f)
	 0011	 0000006F	 
213   	 0012					.dw  (0x70)
	 0012	 00000070	 
214   	 0013					.dw  (0x65)
	 0013	 00000065	 
215   	 0014					.dw  (0x6e)
	 0014	 0000006E	 
216   	 0015					.dw  (0x20)
	 0015	 00000020	 
217   	 0016					.dw  (0x77)
	 0016	 00000077	 
218   	 0017					.dw  (0x61)
	 0017	 00000061	 
219   	 0018					.dw  (0x76)
	 0018	 00000076	 
220   	 0019					.dw  (0x65)
	 0019	 00000065	 
221   	 001A					.dw  (0x66)
	 001A	 00000066	 
222   	 001B					.dw  (0x69)
	 001B	 00000069	 
223   	 001C					.dw  (0x6c)
	 001C	 0000006C	 
224   	 001D					.dw  (0x65)
	 001D	 00000065	 
225   	 001E					.dw  (0x2e)
	 001E	 0000002E	 
226   	 001F					.dw  (0xa)
	 001F	 0000000A	 
227   	 0020					.dw  (0x0)
	 0020	 00000000	 
228   							.xdata_ovly
228    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
229   	 0000				_string_const_6
230   	 0000					.dw  (0x25)
	 0000	 00000025	 
231   	 0001					.dw  (0x6c)
	 0001	 0000006C	 
232   	 0002					.dw  (0x6c)
	 0002	 0000006C	 
233   	 0003					.dw  (0x75)
	 0003	 00000075	 
234   	 0004					.dw  (0xa)
	 0004	 0000000A	 
235   	 0005					.dw  (0x0)
	 0005	 00000000	 
236   							.code_ovly
236    >> start of macro: .code_ovly
1+    									seg_single , "CODE_OVLY", CODE
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_CODE_ )
2+    						    segment
3+    						  .else
4+    						    segment "CODE_OVLY"
5+    							.if "" != ""
6+    						___SegStart_CODE_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .code_ovly
237   						
238   						
239   						
240   	 0000				_fir_basic:			/* LN: 53 | CYCLE: 0 | RULES: () */ 
241   	 0000	 B0090038		i4 = i0			# LN: 53 | 
242   	 0001	 00004DC1		a1 = 0			# LN: 56 | 
243   	 0002	 80150015		i0 = i1 + (0x15)			# LN: 61 | 
244   	 0003	 81150016		i1 = i1 + (0x16)			# LN: 62 | 
245   	 0004	 81600006		do (0x16), label_end_92			# LN: 65 | 
246   	 0005				label_begin_92:			/* LN: 65 | CYCLE: 0 | RULES: () */ 
247   	 0005	 8C140020		b0 = xmem[i0]; i0 -= 1			# LN: 67, 68 | 
248   	 0006				label_end_92:			# LN: 65 | CYCLE: 1 | RULES: ()
249   	 0006	 9C540021		xmem[i1] = b0h; i1 -= 1			# LN: 67, 69 | 
250   	 0007				for_end_1:			/* LN: 65 | CYCLE: 0 | RULES: () */ 
251   	 0007	 02087FFF		i0 += 1			# LN: 72 | 
252   	 0008	 98540000		xmem[i0] = a0h			# LN: 74 | 
253   	 0009	 8170000C		do (0x17), label_end_93			# LN: 80 | 
254   	 000A				label_begin_93:			/* LN: 80 | CYCLE: 0 | RULES: () */ 
255   	 000A	 08884C08		x0 = xmem[i0]; i0 += 1; y0 = ymem[i4]; i4 += 1; a0 =+ a1			# LN: 82, 86, 82, 85, 84 | 
256   	 000B	 00002408		a0 += y0 * x0			# LN: 84 | 
257   	 000C				label_end_93:			# LN: 80 | CYCLE: 2 | RULES: ()
258   	 000C	 48497FFF		a1 = a0			# LN: 84 | 
259   	 000D				for_end_2:			/* LN: 80 | CYCLE: 0 | RULES: () */ 
260   	 000D	 00004C08		a0 =+ a1			# LN: 88 | 
261   	 000E	 81880000		ret			# LN: 89 | 
262   						
263   						
264   						
265   	 000F				_initGainProcessing:			/* LN: 34 | CYCLE: 0 | RULES: () */ 
266   	 000F	 98440000		xmem[_inputGain + 0] = a0h			# LN: 40 | 
267   	 0010	 A0050000		i0 = (0) + (_hpfHistoryBuffer + 0)			# LN: 41 | 
268   	 0011	 A1050000		i1 = (0) + (_lpfHistoryBuffer + 0)			# LN: 42 | 
269   	 0012	 81700015		do (0x17), label_end_94			# LN: 43 | 
270   	 0013				label_begin_94:			/* LN: 43 | CYCLE: 0 | RULES: () */ 
271   	 0013	 00004DC0		a0 = 0			# LN: 45 | 
272   	 0014	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 45, 47 | 
273   	 0015				label_end_94:			# LN: 43 | CYCLE: 2 | RULES: ()
274   	 0015	 98540011		xmem[i1] = a0h; i1 += 1			# LN: 46, 48 | 
275   	 0016				for_end_0:			/* LN: 43 | CYCLE: 0 | RULES: () */ 
276   	 0016	 81880000		ret			# LN: 51 | 
277   						
278   						
279   						
280   							# This construction should ensure linking of crt0 in case when target is a standalone program without the OS
281   							.if defined(_OVLY_)
282   								.if .strcmp('standalone',_OVLY_)=0
283   								.if .strcmp('crystal32',_TARGET_FAMILY_)=0
284   	 0000							.extern __start         # dummy use of __start to force linkage of crt0
285   	 0000				dummy		.equ(__start)
286   								.else
287   									.extern __intvec         # dummy use of __intvec to force linkage of intvec
288   						dummy		.equ(__intvec)
289   								.endif
290   								.endif
291   							.endif
292   						
293   	 0017				_main:			/* LN: 207 | CYCLE: 0 | RULES: () */ 
294   	 0017	 B2540017		xmem[i7] = i2; i7 += 1			# LN: 207, 207 | 
295   	 0018	 A2540017		xmem[i7] = a2g; i7 += 1			# LN: 207, 207 | 
296   	 0019	 9A540017		xmem[i7] = a2h; i7 += 1			# LN: 207, 207 | 
297   	 001A	 92540017		xmem[i7] = a2l; i7 += 1			# LN: 207, 207 | 
298   	 001B	 A3540017		xmem[i7] = a3g; i7 += 1			# LN: 207, 207 | 
299   	 001C	 9B540017		xmem[i7] = a3h; i7 += 1			# LN: 207, 207 | 
300   	 001D	 93540017		xmem[i7] = a3l; i7 += 1			# LN: 207, 207 | 
301   	 001E	 B3540017		xmem[i7] = i3; i7 += 1			# LN: 207, 207 | 
302   	 001F	 A6540017		xmem[i7] = b2g; i7 += 1			# LN: 207, 207 | 
303   	 0020	 9E540017		xmem[i7] = b2h; i7 += 1			# LN: 207, 207 | 
304   	 0021	 96540017		xmem[i7] = b2l; i7 += 1			# LN: 207, 207 | 
305   	 0022	 877501FC		i7 = i7 + (0x1fc)			# LN: 207 | 
306   	 0023	 B0090032		i2 = i0			# LN: 207 | 
307   	 0024	 8A040000		a2 = xmem[__extractedConst_0_1 + 0]			# LN: 225 | 
308   	 0025	 00004DC1		a1 = 0			# LN: 227 | 
309   	 0026	 8C4A0001		uhalfword(b0) = (0x1)			# LN: 226 | 
310   	 0027	 9C440000		xmem[_enableFlag + 0] = b0h			# LN: 226 | 
311   	 0028	 99440000		xmem[_modeFlag + 0] = a1h			# LN: 227 | 
312   	 0029	 894A0005		uhalfword(a1) = (0x5)			# LN: 229 | 
313   	 002A	 00004F08		a0 - a1			# LN: 229 | 
314   	 002B	 84480052		if (a != 0) jmp (else_2)			# LN: 229 | 
315   	 002C	 80250003		i0 = i2 + (0x3)			# LN: 230 | 
316   	 002D	 B0140000		i0 = xmem[i0]			# LN: 230 | 
317   	 002E	 A1050000		i1 = (0) + (_string_const_0)			# LN: 230 | 
318   	 002F	 80880000		call (_strcmp)			# LN: 230 | 
319   	 0030	 00004E80		a0 & a0			# LN: 230 | 
320   	 0031	 84480034		if (a != 0) jmp (else_3)			# LN: 230 | 
321   	 0032	 8A040000		a2 = xmem[__extractedConst_1_1 + 0]			# LN: 231 | 
322   	 0033	 8008003B		jmp (endif_3)			# LN: 231 | 
323   	 0034				else_3:			/* LN: 230 | CYCLE: 0 | RULES: () */ 
324   	 0034	 80250003		i0 = i2 + (0x3)			# LN: 232 | 
325   	 0035	 B0140000		i0 = xmem[i0]			# LN: 232 | 
326   	 0036	 A1050000		i1 = (0) + (_string_const_1)			# LN: 232 | 
327   	 0037	 80880000		call (_strcmp)			# LN: 232 | 
328   	 0038	 00004E80		a0 & a0			# LN: 232 | 
329   	 0039	 8448003B		if (a != 0) jmp (else_4)			# LN: 232 | 
330   	 003A	 8A040000		a2 = xmem[__extractedConst_2_1 + 0]			# LN: 233 | 
331   	 003B				endif_3:			/* LN: 230 | CYCLE: 0 | RULES: () */ 
332   	 003B				endif_4:			/* LN: 232 | CYCLE: 0 | RULES: () */ 
333   	 003B				else_4:			/* LN: 232 | CYCLE: 0 | RULES: () */ 
334   	 003B	 B2090030		i0 = i2			# LN: 234 | 
335   	 003C	 A1050000		i1 = (0) + (_string_const_2)			# LN: 234 | 
336   	 003D	 02287FFF		i0 += 2			# LN: 234 | 
337   	 003E	 B0140000		i0 = xmem[i0]			# LN: 234 | 
338   	 003F	 80880000		call (_strcmp)			# LN: 234 | 
339   	 0040	 00004E80		a0 & a0			# LN: 234 | 
340   	 0041	 84480045		if (a != 0) jmp (else_5)			# LN: 234 | 
341   	 0042	 884A0001		uhalfword(a0) = (0x1)			# LN: 235 | 
342   	 0043	 98440000		xmem[_enableFlag + 0] = a0h			# LN: 235 | 
343   	 0044	 80080047		jmp (endif_5)			# LN: 235 | 
344   	 0045				else_5:			/* LN: 234 | CYCLE: 0 | RULES: () */ 
345   	 0045	 00004DC0		a0 = 0			# LN: 237 | 
346   	 0046	 98440000		xmem[_enableFlag + 0] = a0h			# LN: 237 | 
347   	 0047				endif_5:			/* LN: 234 | CYCLE: 0 | RULES: () */ 
348   	 0047	 80250004		i0 = i2 + (0x4)			# LN: 238 | 
349   	 0048	 B0140000		i0 = xmem[i0]			# LN: 238 | 
350   	 0049	 A1050000		i1 = (0) + (_string_const_3)			# LN: 238 | 
351   	 004A	 80880000		call (_strcmp)			# LN: 238 | 
352   	 004B	 00004E80		a0 & a0			# LN: 238 | 
353   	 004C	 84480050		if (a != 0) jmp (else_6)			# LN: 238 | 
354   	 004D	 884A0001		uhalfword(a0) = (0x1)			# LN: 239 | 
355   	 004E	 98440000		xmem[_modeFlag + 0] = a0h			# LN: 239 | 
356   	 004F	 80080052		jmp (else_2)			# LN: 239 | 
357   	 0050				else_6:			/* LN: 238 | CYCLE: 0 | RULES: () */ 
358   	 0050	 00004DC0		a0 = 0			# LN: 241 | 
359   	 0051	 98440000		xmem[_modeFlag + 0] = a0h			# LN: 241 | 
360   	 0052				endif_2:			/* LN: 229 | CYCLE: 0 | RULES: () */ 
361   	 0052				else_2:			/* LN: 229 | CYCLE: 0 | RULES: () */ 
362   	 0052	 00004DC0		a0 = 0			# LN: 245 | 
363   	 0053	 80800061		do (0x8), label_end_96			# LN: 245 | 
364   	 0054				label_begin_96:			/* LN: 245 | CYCLE: 0 | RULES: () */ 
365   	 0054	 00004DC1		a1 = 0			# LN: 246 | 
366   	 0055	 8100005F		do (0x10), label_end_95			# LN: 246 | 
367   	 0056				label_begin_95:			/* LN: 246 | CYCLE: 0 | RULES: () */ 
368   	 0056	 00004C24		b0 =+ a0			# LN: 247 | 
369   	 0057	 00004EC4		b0 = b0 << 4			# LN: 247 | 
370   	 0058	 4C704DC4		i0 = b0; b0 = 0			# LN: 247, 247 | 
371   	 0059	 8D4A0001		uhalfword(b1) = (0x1)			# LN: 246 | 
372   	 005A	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 247 | 
373   	 005B	 0B707FFF		a3 = i0			# LN: 247 | 
374   	 005C	 0000458B		a3 = a3 + a1			# LN: 247 | 
375   	 005D	 9B090030		AnyReg(i0, a3h)			# LN: 247 | 
376   	 005E	 000044A9		a1 = a1 + b1			# LN: 246 | 
377   	 005F				label_end_95:			# LN: 246 | CYCLE: 9 | RULES: ()
378   	 005F	 9CD40000		ymem[i0] = b0h			# LN: 247 | 
379   	 0060				init_latch_label_4:			/* LN: 247 | CYCLE: 0 | RULES: () */ 
380   	 0060				for_end_4:			/* LN: 246 | CYCLE: 0 | RULES: () */ 
381   	 0060	 894A0001		uhalfword(a1) = (0x1)			# LN: 245 | 
382   	 0061				label_end_96:			# LN: 245 | CYCLE: 1 | RULES: ()
383   	 0061	 00004408		a0 = a0 + a1			# LN: 245 | 
384   	 0062				for_end_3:			/* LN: 245 | CYCLE: 0 | RULES: () */ 
385   	 0062	 B1140002		i1 = xmem[i2]			# LN: 251 | 
386   	 0063	 907500FE		i0 = i7 - (254 - 0)			# LN: 251 | 
387   	 0064	 80880000		call (_strcpy)			# LN: 251 | 
388   	 0065	 907500FE		i0 = i7 - (254 - 0)			# LN: 252 | 
389   	 0066	 80880000		call (_cl_wavread_open)			# LN: 252 | 
390   	 0067	 98090033		AnyReg(i3, a0h)			# LN: 252 | 
391   	 0068	 08737FFF		a0 = i3			# LN: 253 | 
392   	 0069	 00004E80		a0 & a0			# LN: 253 | 
393   	 006A	 8448006F		if (a != 0) jmp (else_7)			# LN: 253 | 
394   	 006B	 A0050000		i0 = (0) + (_string_const_4)			# LN: 255 | 
395   	 006C	 80880000		call (_printf)			# LN: 255 | 
396   	 006D	 886AFFFF		halfword(a0) = (0xffff)			# LN: 256 | 
397   	 006E	 800800DA		jmp (__epilogue_242)			# LN: 256 | 
398   	 006F				endif_7:			/* LN: 253 | CYCLE: 0 | RULES: () */ 
399   	 006F				else_7:			/* LN: 253 | CYCLE: 0 | RULES: () */ 
400   	 006F	 B3090030		i0 = i3			# LN: 262 | 
401   	 0070	 80880000		call (_cl_wavread_getnchannels)			# LN: 262 | 
402   	 0071	 020A4C03		i2 += 1; a3 =+ a0			# LN: 270, 262 | 
403   	 0072	 B3090030		i0 = i3			# LN: 263 | 
404   	 0073	 80880000		call (_cl_wavread_bits_per_sample)			# LN: 263 | 
405   	 0074	 00004C01		a1 =+ a0			# LN: 263 | 
406   	 0075	 B3090030		i0 = i3			# LN: 264 | 
407   	 0076	 80880000		call (_cl_wavread_frame_rate)			# LN: 264 | 
408   	 0077	 00004C24		b0 =+ a0			# LN: 264 | 
409   	 0078	 B3090030		i0 = i3			# LN: 265 | 
410   	 0079	 80880000		call (_cl_wavread_number_of_frames)			# LN: 265 | 
411   	 007A	 907501FC		i0 = i7 - (508 - 0)			# LN: 270 | 
412   	 007B	 00004C25		b1 =+ a0			# LN: 265 | 
413   	 007C	 B1140002		i1 = xmem[i2]			# LN: 270 | 
414   	 007D	 00004C3E		b2 =+ a3			# LN: 271 | 
415   	 007E	 80880000		call (_strcpy)			# LN: 270 | 
416   	 007F	 88040000		a0 = xmem[_enableFlag + 0]			# LN: 272 | 
417   	 0080	 00004E80		a0 & a0			# LN: 272 | 
418   	 0081	 84080083		if (a == 0) jmp (else_8)			# LN: 272 | 
419   	 0082	 8E4A0005		uhalfword(b2) = (0x5)			# LN: 273 | 
420   	 0083				endif_8:			/* LN: 272 | CYCLE: 0 | RULES: () */ 
421   	 0083				else_8:			/* LN: 272 | CYCLE: 0 | RULES: () */ 
422   	 0083	 907501FC		i0 = i7 - (508 - 0)			# LN: 276 | 
423   	 0084	 00004C08		a0 =+ a1			# LN: 276 | 
424   	 0085	 00004C31		a1 =+ b2			# LN: 276 | 
425   	 0086	 80880000		call (_cl_wavwrite_open)			# LN: 276 | 
426   	 0087	 98090032		AnyReg(i2, a0h)			# LN: 276 | 
427   	 0088	 08727FFF		a0 = i2			# LN: 277 | 
428   	 0089	 00004E80		a0 & a0			# LN: 277 | 
429   	 008A	 8448008F		if (a != 0) jmp (else_9)			# LN: 277 | 
430   	 008B	 A0050000		i0 = (0) + (_string_const_5)			# LN: 279 | 
431   	 008C	 80880000		call (_printf)			# LN: 279 | 
432   	 008D	 886AFFFF		halfword(a0) = (0xffff)			# LN: 280 | 
433   	 008E	 800800DA		jmp (__epilogue_242)			# LN: 280 | 
434   	 008F				endif_9:			/* LN: 277 | CYCLE: 0 | RULES: () */ 
435   	 008F				else_9:			/* LN: 277 | CYCLE: 0 | RULES: () */ 
436   	 008F	 00004C10		a0 =+ a2			# LN: 285 | 
437   	 0090	 8088000F		call (_initGainProcessing)			# LN: 285 | 
438   	 0091	 894A0010		uhalfword(a1) = (0x10)			# LN: 296 | 
439   	 0092	 00004C28		a0 =+ b1			# LN: 296 | 
440   	 0093	 80880000		call (__div)			# LN: 296 | 
441   	 0094	 98090030		AnyReg(i0, a0h)			# LN: 296 | 
442   	 0095	 00007FFF		nop #empty cycle
443   	 0096	 800100D4		do (i0), label_end_101			# LN: 296 | 
444   	 0097				label_begin_101:			/* LN: 296 | CYCLE: 0 | RULES: () */ 
445   	 0097	 00004DC2		a2 = 0			# LN: 298 | 
446   	 0098	 810000A9		do (0x10), label_end_98			# LN: 298 | 
447   	 0099				label_begin_98:			/* LN: 298 | CYCLE: 0 | RULES: () */ 
448   	 0099	 9B090030		AnyReg(i0, a3h)			# LN: 300 | 
449   	 009A	 00004DC4		b0 = 0			# LN: 300 | 
450   	 009B	 800100A7		do (i0), label_end_97			# LN: 300 | 
451   	 009C				label_begin_97:			/* LN: 300 | CYCLE: 0 | RULES: () */ 
452   	 009C	 B3090030		i0 = i3			# LN: 302 | 
453   	 009D	 80880000		call (_cl_wavread_recvsample)			# LN: 302 | 
454   	 009E	 00005C01		a1 =+ a0; b1 =+ b0			# LN: 302, 303 | 
455   	 009F	 00004EC5		b1 = b1 << 4			# LN: 303 | 
456   	 00A0	 4D704C08		i0 = b1; a0 =+ a1			# LN: 303, 303 | 
457   	 00A1	 894A0001		uhalfword(a1) = (0x1)			# LN: 300 | 
458   	 00A2	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 303 | 
459   	 00A3	 0D70442C		b1 = i0; b0 = b0 + a1			# LN: 303, 300 | 
460   	 00A4	 00004529		a1 = a2 + b1			# LN: 303 | 
461   	 00A5	 99090030		AnyReg(i0, a1h)			# LN: 303 | 
462   	 00A6	 00007FFF		nop #empty cycle
463   	 00A7				label_end_97:			# LN: 300 | CYCLE: 11 | RULES: ()
464   	 00A7	 98D40000		ymem[i0] = a0h			# LN: 303 | 
465   	 00A8				init_latch_label_6:			/* LN: 305 | CYCLE: 0 | RULES: () */ 
466   	 00A8				for_end_7:			/* LN: 300 | CYCLE: 0 | RULES: () */ 
467   	 00A8	 884A0001		uhalfword(a0) = (0x1)			# LN: 298 | 
468   	 00A9				label_end_98:			# LN: 298 | CYCLE: 1 | RULES: ()
469   	 00A9	 00004502		a2 = a2 + a0			# LN: 298 | 
470   	 00AA				for_end_6:			/* LN: 298 | CYCLE: 0 | RULES: () */ 
471   	 00AA	 88040000		a0 = xmem[_enableFlag + 0]			# LN: 308 | 
472   	 00AB	 00004E80		a0 & a0			# LN: 308 | 
473   	 00AC	 840800C1		if (a == 0) jmp (else_10)			# LN: 308 | 
474   	 00AD	 80880000		call (_cl_get_cycle_count)			# LN: 310 | 
475   	 00AE	 98440000		xmem[_c1 + 0] = a0h			# LN: 310 | 
476   	 00AF	 90440001		xmem[_c1 + 1] = a0l			# LN: 310 | 
477   	 00B0	 A0050000		i0 = (0) + (_sampleBuffer)			# LN: 312 | 
478   	 00B1	 A1050000		i1 = (0) + (_sampleBuffer)			# LN: 312 | 
479   	 00B2	 80880000		call (_processing)			# LN: 312 | 
480   	 00B3	 80880000		call (_cl_get_cycle_count)			# LN: 314 | 
481   	 00B4	 98440000		xmem[_c2 + 0] = a0h			# LN: 314 | 
482   	 00B5	 90440001		xmem[_c2 + 1] = a0l			# LN: 314 | 
483   	 00B6	 88040000		a0 = xmem[_c2 + 0]			# LN: 316 | 
484   	 00B7	 90040001		a0l = xmem[_c2 + 1]			# LN: 316 | 
485   	 00B8	 89040000		a1 = xmem[_c1 + 0]			# LN: 316 | 
486   	 00B9	 91040001		a1l = xmem[_c1 + 1]			# LN: 316 | 
487   	 00BA	 00004448		a0 = a0 - a1			# LN: 316 | 
488   	 00BB	 98440000		xmem[_spent_cycles + 0] = a0h			# LN: 316 | 
489   	 00BC	 90440001		xmem[_spent_cycles + 1] = a0l			# LN: 316 | 
490   	 00BD	 88040000		a0 = xmem[_spent_cycles + 0]			# LN: 317 | 
491   	 00BE	 90040001		a0l = xmem[_spent_cycles + 1]			# LN: 317 | 
492   	 00BF	 A0050000		i0 = (0) + (_string_const_6)			# LN: 317 | 
493   	 00C0	 80880000		call (_printf)			# LN: 317 | 
494   	 00C1				endif_10:			/* LN: 308 | CYCLE: 0 | RULES: () */ 
495   	 00C1				else_10:			/* LN: 308 | CYCLE: 0 | RULES: () */ 
496   	 00C1	 00004DC1		a1 = 0			# LN: 322 | 
497   	 00C2	 810000D3		do (0x10), label_end_100			# LN: 322 | 
498   	 00C3				label_begin_100:			/* LN: 322 | CYCLE: 0 | RULES: () */ 
499   	 00C3	 9E090030		AnyReg(i0, b2h)			# LN: 324 | 
500   	 00C4	 00004DC4		b0 = 0			# LN: 324 | 
501   	 00C5	 800100D1		do (i0), label_end_99			# LN: 324 | 
502   	 00C6				label_begin_99:			/* LN: 324 | CYCLE: 0 | RULES: () */ 
503   	 00C6	 00004C20		a0 =+ b0			# LN: 326 | 
504   	 00C7	 00004EC0		a0 = a0 << 4			# LN: 326 | 
505   	 00C8	 48717FFF		i1 = a0			# LN: 326 | 
506   	 00C9	 B2090030		i0 = i2			# LN: 327 | 
507   	 00CA	 81150000		i1 = i1 + (_sampleBuffer + 0)			# LN: 326 | 
508   	 00CB	 08717FFF		a0 = i1			# LN: 326 | 
509   	 00CC	 00004408		a0 = a0 + a1			# LN: 326 | 
510   	 00CD	 98090031		AnyReg(i1, a0h)			# LN: 326 | 
511   	 00CE	 884A0001		uhalfword(a0) = (0x1)			# LN: 324 | 
512   	 00CF	 2D414424		b1 = ymem[i1]; b0 = b0 + a0			# LN: 326, 324 | 
513   	 00D0	 00004C28		a0 =+ b1			# LN: 326 | 
514   	 00D1				label_end_99:			# LN: 324 | CYCLE: 11 | RULES: ()
515   	 00D1	 80880000		call (_cl_wavwrite_sendsample)			# LN: 327 | 
516   	 00D2				init_latch_label_8:			/* LN: 329 | CYCLE: 0 | RULES: () */ 
517   	 00D2				for_end_9:			/* LN: 324 | CYCLE: 0 | RULES: () */ 
518   	 00D2	 884A0001		uhalfword(a0) = (0x1)			# LN: 322 | 
519   	 00D3				label_end_100:			# LN: 322 | CYCLE: 1 | RULES: ()
520   	 00D3	 00004481		a1 = a1 + a0			# LN: 322 | 
521   	 00D4				init_latch_label_9:			/* LN: 330 | CYCLE: 0 | RULES: () */ 
522   	 00D4				for_end_8:			/* LN: 322 | CYCLE: 0 | RULES: () */ 
523   	 00D4				label_end_101:			# LN: 296 | CYCLE: 0 | RULES: ()
524   	 00D4	 00007FFF		nop #empty cycle
525   	 00D5				for_end_5:			/* LN: 296 | CYCLE: 0 | RULES: () */ 
526   	 00D5	 B3090030		i0 = i3			# LN: 335 | 
527   	 00D6	 80880000		call (_cl_wavread_close)			# LN: 335 | 
528   	 00D7	 B2090030		i0 = i2			# LN: 336 | 
529   	 00D8	 80880000		call (_cl_wavwrite_close)			# LN: 336 | 
530   	 00D9	 00004DC0		a0 = 0			# LN: 339 | 
531   	 00DA				__epilogue_242:			/* LN: 340 | CYCLE: 0 | RULES: () */ 
532   	 00DA	 977501FC		i7 = i7 - (0x1fc)			# LN: 340 | 
533   	 00DB	 02177FFF		i7 -= 1			# LN: 340 | 
534   	 00DC	 96140027		b2l = xmem[i7]; i7 -= 1			# LN: 340, 340 | 
535   	 00DD	 9E140027		b2h = xmem[i7]; i7 -= 1			# LN: 340, 340 | 
536   	 00DE	 A6140027		b2g = xmem[i7]; i7 -= 1			# LN: 340, 340 | 
537   	 00DF	 B3140027		i3 = xmem[i7]; i7 -= 1			# LN: 340, 340 | 
538   	 00E0	 93140027		a3l = xmem[i7]; i7 -= 1			# LN: 340, 340 | 
539   	 00E1	 9B140027		a3h = xmem[i7]; i7 -= 1			# LN: 340, 340 | 
540   	 00E2	 A3140027		a3g = xmem[i7]; i7 -= 1			# LN: 340, 340 | 
541   	 00E3	 92140027		a2l = xmem[i7]; i7 -= 1			# LN: 340, 340 | 
542   	 00E4	 9A140027		a2h = xmem[i7]; i7 -= 1			# LN: 340, 340 | 
543   	 00E5	 A2140027		a2g = xmem[i7]; i7 -= 1			# LN: 340, 340 | 
544   	 00E6	 B2140007		i2 = xmem[i7]			# LN: 340 | 
545   	 00E7	 81880000		ret			# LN: 340 | 
546   						
547   						
548   						
549   	 00E8				_saturation:			/* LN: 91 | CYCLE: 0 | RULES: () */ 
550   	 00E8	 89040000		a1 = xmem[_limiterThreshold + 0]			# LN: 94 | 
551   	 00E9	 00004F08		a0 - a1			# LN: 94 | 
552   	 00EA	 850800ED		if (a <= 0) jmp (else_0)			# LN: 94 | 
553   	 00EB	 88040000		a0 = xmem[_limiterThreshold + 0]			# LN: 96 | 
554   	 00EC	 800800F4		jmp (__epilogue_238)			# LN: 96 | 
555   	 00ED				else_0:			/* LN: 94 | CYCLE: 0 | RULES: () */ 
556   	 00ED	 89040000		a1 = xmem[_limiterThreshold + 0]			# LN: 98 | 
557   	 00EE	 00004C89		a1 =- a1			# LN: 98 | 
558   	 00EF	 00004F08		a0 - a1			# LN: 98 | 
559   	 00F0	 84C800F4		if (a >= 0) jmp (else_1)			# LN: 98 | 
560   	 00F1	 88040000		a0 = xmem[_limiterThreshold + 0]			# LN: 100 | 
561   	 00F2	 00004C80		a0 =- a0			# LN: 100 | 
562   	 00F3	 800800F4		jmp (__epilogue_238)			# LN: 100 | 
563   	 00F4				__epilogue_238:			/* LN: 104 | CYCLE: 0 | RULES: () */ 
564   	 00F4				endif_0:			/* LN: 94 | CYCLE: 0 | RULES: () */ 
565   	 00F4				endif_1:			/* LN: 98 | CYCLE: 0 | RULES: () */ 
566   	 00F4				else_1:			/* LN: 98 | CYCLE: 0 | RULES: () */ 
567   	 00F4	 81880000		ret			# LN: 104 | 
568   						(null)
				 SYMBOL TABLE 

    Name                                                                                    Type                  Value 

_COMMON_INC_PATH_                                                               					 Define                 "C:/CirrusDSP/crystal32/common/inc/"
_DSP_                                                                           					 Define                 "a"
_LOCAL_INC_PATH_                                                                					 Define                 "inc/"
_LOCAL_SRC_PATH_                                                                					 Define                 "src/"
_MUI_VERSION_                                                                   					 Define                 "020000"
_OVLY_                                                                          					 Define                 "standalone"
_OVLY_REVISION_                                                                 					 Define                 "020000"
_ROUTER_INC_PATH_                                                               					 Define                 "rom_inc/"
_SLOT_                                                                          					 Define                 "0"
_TARGET_FAMILY_                                                                 					 Define                 "crystal32"
_TOOLS_VERSION_                                                                 					 Define                 "0x0701"
_VERSION_                                                                       					 Define                 "00"
__CASM_VER__                                                                    			  Unused Variable		        0 (701H)
___TIMER0_COUNT                                                                 					 External   
___TIMER1_COUNT                                                                 					 External   
___TIMER1_ENABLE                                                                					 External   
__div                                                                           					 External   
__epilogue_238                                                                  			         Relocatable         main_GEN_0024:00F4H
__epilogue_242                                                                  			         Relocatable         main_GEN_0024:00DAH
__extractedConst_0_1                                                            			         Relocatable         main_GEN_0000:0000H
__extractedConst_1_1                                                            			         Relocatable         main_GEN_0001:0000H
__extractedConst_2_1                                                            			         Relocatable         main_GEN_0002:0000H
__start                                                                         					 External   
_c1                                                                             			  Public Relocatable       main_GEN_0003:0000H
_c2                                                                             			  Public Relocatable       main_GEN_0004:0000H
_cl_get_cycle_count                                                             					 External   
_cl_wavread_bits_per_sample                                                     					 External   
_cl_wavread_close                                                               					 External   
_cl_wavread_frame_rate                                                          					 External   
_cl_wavread_getnchannels                                                        					 External   
_cl_wavread_number_of_frames                                                    					 External   
_cl_wavread_open                                                                					 External   
_cl_wavread_recvsample                                                          					 External   
_cl_wavwrite_close                                                              					 External   
_cl_wavwrite_open                                                               					 External   
_cl_wavwrite_sendsample                                                         					 External   
_enableFlag                                                                     			  Public Relocatable       main_GEN_0005:0000H
_fir_basic                                                                      			  Public Relocatable       main_GEN_0024:0000H
_hpfCoefs                                                                       			  Public Relocatable       main_GEN_0006:0000H
_hpfHistoryBuffer                                                               			  Public Relocatable       main_GEN_0007:0000H
_inChannels                                                                     			  Public Relocatable       main_GEN_0008:0000H
_initGainProcessing                                                             			  Public Relocatable       main_GEN_0024:000FH
_inputGain                                                                      			  Public Relocatable       main_GEN_0009:0000H
_limiterThreshold                                                               			  Public Relocatable       main_GEN_0010:0000H
_lpfCoefs                                                                       			  Public Relocatable       main_GEN_0011:0000H
_lpfHistoryBuffer                                                               			  Public Relocatable       main_GEN_0012:0000H
_main                                                                           			  Public Relocatable       main_GEN_0024:0017H
_modeFlag                                                                       			  Public Relocatable       main_GEN_0013:0000H
_outChannels                                                                    			  Public Relocatable       main_GEN_0014:0000H
_printf                                                                         					 External   
_processing                                                                     					 External   
_sampleBuffer                                                                   			  Public Relocatable       main_GEN_0015:0000H
_saturation                                                                     			  Public Relocatable       main_GEN_0024:00E8H
_spent_cycles                                                                   			  Public Relocatable       main_GEN_0016:0000H
_strcmp                                                                         					 External   
_strcpy                                                                         					 External   
_string_const_0                                                                 			         Relocatable         main_GEN_0017:0000H
_string_const_1                                                                 			         Relocatable         main_GEN_0018:0000H
_string_const_2                                                                 			         Relocatable         main_GEN_0019:0000H
_string_const_3                                                                 			         Relocatable         main_GEN_0020:0000H
_string_const_4                                                                 			         Relocatable         main_GEN_0021:0000H
_string_const_5                                                                 			         Relocatable         main_GEN_0022:0000H
_string_const_6                                                                 			         Relocatable         main_GEN_0023:0000H
dummy                                                                           			  Unused Number				     0 (0H)
else_0                                                                          			         Relocatable         main_GEN_0024:00EDH
else_1                                                                          			         Relocatable         main_GEN_0024:00F4H
else_10                                                                         			         Relocatable         main_GEN_0024:00C1H
else_2                                                                          			         Relocatable         main_GEN_0024:0052H
else_3                                                                          			         Relocatable         main_GEN_0024:0034H
else_4                                                                          			         Relocatable         main_GEN_0024:003BH
else_5                                                                          			         Relocatable         main_GEN_0024:0045H
else_6                                                                          			         Relocatable         main_GEN_0024:0050H
else_7                                                                          			         Relocatable         main_GEN_0024:006FH
else_8                                                                          			         Relocatable         main_GEN_0024:0083H
else_9                                                                          			         Relocatable         main_GEN_0024:008FH
endif_0                                                                         			  Unused Relocatable        main_GEN_0024:00F4H
endif_1                                                                         			  Unused Relocatable        main_GEN_0024:00F4H
endif_10                                                                        			  Unused Relocatable        main_GEN_0024:00C1H
endif_2                                                                         			  Unused Relocatable        main_GEN_0024:0052H
endif_3                                                                         			         Relocatable         main_GEN_0024:003BH
endif_4                                                                         			  Unused Relocatable        main_GEN_0024:003BH
endif_5                                                                         			         Relocatable         main_GEN_0024:0047H
endif_7                                                                         			  Unused Relocatable        main_GEN_0024:006FH
endif_8                                                                         			  Unused Relocatable        main_GEN_0024:0083H
endif_9                                                                         			  Unused Relocatable        main_GEN_0024:008FH
for_end_0                                                                       			  Unused Relocatable        main_GEN_0024:0016H
for_end_1                                                                       			  Unused Relocatable        main_GEN_0024:0007H
for_end_2                                                                       			  Unused Relocatable        main_GEN_0024:000DH
for_end_3                                                                       			  Unused Relocatable        main_GEN_0024:0062H
for_end_4                                                                       			  Unused Relocatable        main_GEN_0024:0060H
for_end_5                                                                       			  Unused Relocatable        main_GEN_0024:00D5H
for_end_6                                                                       			  Unused Relocatable        main_GEN_0024:00AAH
for_end_7                                                                       			  Unused Relocatable        main_GEN_0024:00A8H
for_end_8                                                                       			  Unused Relocatable        main_GEN_0024:00D4H
for_end_9                                                                       			  Unused Relocatable        main_GEN_0024:00D2H
init_latch_label_4                                                              			  Unused Relocatable        main_GEN_0024:0060H
init_latch_label_6                                                              			  Unused Relocatable        main_GEN_0024:00A8H
init_latch_label_8                                                              			  Unused Relocatable        main_GEN_0024:00D2H
init_latch_label_9                                                              			  Unused Relocatable        main_GEN_0024:00D4H
label_begin_100                                                                 			  Unused Relocatable        main_GEN_0024:00C3H
label_begin_101                                                                 			  Unused Relocatable        main_GEN_0024:0097H
label_begin_92                                                                  			  Unused Relocatable        main_GEN_0024:0005H
label_begin_93                                                                  			  Unused Relocatable        main_GEN_0024:000AH
label_begin_94                                                                  			  Unused Relocatable        main_GEN_0024:0013H
label_begin_95                                                                  			  Unused Relocatable        main_GEN_0024:0056H
label_begin_96                                                                  			  Unused Relocatable        main_GEN_0024:0054H
label_begin_97                                                                  			  Unused Relocatable        main_GEN_0024:009CH
label_begin_98                                                                  			  Unused Relocatable        main_GEN_0024:0099H
label_begin_99                                                                  			  Unused Relocatable        main_GEN_0024:00C6H
label_end_100                                                                   			         Relocatable         main_GEN_0024:00D3H
label_end_101                                                                   			         Relocatable         main_GEN_0024:00D4H
label_end_92                                                                    			         Relocatable         main_GEN_0024:0006H
label_end_93                                                                    			         Relocatable         main_GEN_0024:000CH
label_end_94                                                                    			         Relocatable         main_GEN_0024:0015H
label_end_95                                                                    			         Relocatable         main_GEN_0024:005FH
label_end_96                                                                    			         Relocatable         main_GEN_0024:0061H
label_end_97                                                                    			         Relocatable         main_GEN_0024:00A7H
label_end_98                                                                    			         Relocatable         main_GEN_0024:00A9H
label_end_99                                                                    			         Relocatable         main_GEN_0024:00D1H

	       SEGMENTS:

Size			  Name										 Class
0000H	 __INIT                                  			 CODE                                    
0001H	 main_GEN_0000                           			 X_OVLY                                  
0001H	 main_GEN_0001                           			 X_OVLY                                  
0001H	 main_GEN_0002                           			 X_OVLY                                  
0002H	 main_GEN_0003                           			 X_OVLY                                  
0002H	 main_GEN_0004                           			 X_OVLY                                  
0001H	 main_GEN_0005                           			 X_OVLY                                  
0017H	 main_GEN_0006                           			 Y_OVLY                                  
0017H	 main_GEN_0007                           			 X_OVLY                                  
0001H	 main_GEN_0008                           			 X_OVLY                                  
0001H	 main_GEN_0009                           			 X_OVLY                                  
0001H	 main_GEN_0010                           			 X_OVLY                                  
0017H	 main_GEN_0011                           			 Y_OVLY                                  
0017H	 main_GEN_0012                           			 X_OVLY                                  
0001H	 main_GEN_0013                           			 X_OVLY                                  
0001H	 main_GEN_0014                           			 X_OVLY                                  
0080H	 main_GEN_0015                           			 Y_OVLY                                  
0002H	 main_GEN_0016                           			 X_OVLY                                  
0007H	 main_GEN_0017                           			 X_OVLY                                  
0006H	 main_GEN_0018                           			 X_OVLY                                  
0002H	 main_GEN_0019                           			 X_OVLY                                  
0002H	 main_GEN_0020                           			 X_OVLY                                  
0021H	 main_GEN_0021                           			 X_OVLY                                  
0021H	 main_GEN_0022                           			 X_OVLY                                  
0006H	 main_GEN_0023                           			 X_OVLY                                  
00F5H	 main_GEN_0024                           			 CODE_OVLY                               
